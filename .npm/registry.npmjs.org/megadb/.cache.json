{"_id":"megadb","_rev":"34-14bdbd37d10440b1c07f9c5c0b64668b","time":{"0.1.0":"2018-12-29T03:16:20.520Z","created":"2019-04-14T03:24:06.997Z","1.0.0":"2019-04-14T03:24:07.135Z","modified":"2022-05-09T02:50:31.312Z","1.1.0":"2019-04-14T04:07:41.674Z","1.2.0":"2019-04-14T04:10:06.705Z","1.3.0":"2019-04-14T04:13:12.858Z","1.4.0":"2019-04-14T21:41:01.258Z","1.5.0":"2019-04-15T05:19:23.667Z","1.6.0":"2019-04-18T20:21:54.718Z","1.7.0":"2019-04-18T20:23:21.849Z","1.8.0":"2019-04-19T03:48:35.590Z","1.9.0":"2019-04-19T04:42:22.032Z","2.0.0":"2019-04-22T19:36:50.410Z","2.2.0":"2019-04-22T19:55:37.174Z","2.3.0":"2019-04-22T20:00:48.915Z","2.4.0":"2019-04-22T20:10:16.818Z","2.5.0":"2019-04-23T16:22:57.431Z","2.6.0":"2019-04-26T17:53:40.974Z","2.7.0":"2019-07-09T19:47:38.281Z","2.8.0":"2019-07-28T22:02:24.723Z","2.9.0":"2019-08-21T04:00:29.140Z","3.0.0":"2019-08-21T16:44:27.287Z","3.1.0":"2020-05-01T23:59:41.454Z","3.2.0":"2020-05-02T01:54:13.519Z","3.3.0":"2020-05-02T01:59:54.897Z","3.4.0":"2020-05-04T00:41:06.302Z"},"name":"megadb","dist-tags":{"latest":"3.4.0"},"versions":{"1.0.0":{"name":"megadb","version":"1.0.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@1.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-MLkOc3xYH16DmMwxsR4+8aJazLGBYkuqP0y1dbfYuN8W/yXFVZuNURUHFXt2DPLm9cMcGW5bfH0L5oaHJzxMTA==","shasum":"ee15f4f3a3b45929d2052c6ba5722c25d991e46c","tarball":"https://registry.npmjs.org/megadb/-/megadb-1.0.0.tgz","fileCount":4,"unpackedSize":66582,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcsqfXCRA9TVsSAnZWagAAV6gP/iheO6zCQ6PrZ2at0uxW\nRvA1/HdiPY/hZHutAB36suX4jnMyjIjPSMMWzxvHJjlsgwvbqvjksZVmoepr\ntIy9qAwXGDpMq35sg8ZY1oX1YF8YulsyVzYnAzahN0Y0OZU0EBaav18Pkjyp\nN6FJrL5QgRBWpffD42RYkO4YqTZHKtJ5sVxUg4VLvSOSfOy89tUbz3AhTxXD\nD/jFClk5NVwstypANIxOkZabCpU4J57dcnP10Yqi3DY23jMgAqixwbOJb0KX\ns91S7IM2InCzUZDiGMtBv7vmVlIsTta15PlOy/a/i9NCU1uI95O95f2TpA6Z\nCDR8aw4JcQ/GvLI4gScd/w5Mw++Z4lGt4UI0mt6/9nclqgwMAKXycWnZaN6e\nkFAzKGebB9MwVqzSPsmv3Z/CS0/fGjSTGuk+Jh6XwBOwVAtdfTaB7QZJx4//\nBjVjAMxQRpG2Fr1/6w21Kg++UsCXAI3vyk8BzSH/56yHevPxDRC9idT1c1+7\nooklsuBkIGKO2nzMgZpz+ULdnla8j+4cwTOOxflonAJfBRWmNZ8RSl8FB/Yo\ng3be9XqT2wwHFU67rDnVf9mISkRwB5qAOG2aAhTT+mbSRLYEc8BbHvpFG2IM\n6RzXLTHjIrHLMcmBd2drDLg8G4vD65Q5Y2L1eCikr/8YGvKF6JqevkLTYYWb\nsEoT\r\n=fUjq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEfEg6UOfIcjZVM6RSLSYBZYlDNzLMlTPfsXEtl6JC5GAiACPKdweogGKxM2JLP0i8XIzHH0yuYlcv72D3IStZSkHQ=="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_1.0.0_1555212246997_0.7766041364335352"},"_hasShrinkwrap":false},"1.3.0":{"name":"megadb","version":"1.3.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@1.3.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-Ti/4gA01VtmFn40iH9qZvdU1029SaWy2AteD9bRMMggXTG4sxezppUfg49DfIwO3x5Y2feATHm6+ucX+Dx6x6g==","shasum":"be7f637528cb2682817d9d80441be01fbd9a8021","tarball":"https://registry.npmjs.org/megadb/-/megadb-1.3.0.tgz","fileCount":4,"unpackedSize":66619,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcsrNZCRA9TVsSAnZWagAAHGEP/3RWCH197cEo1NQJ6Uks\nnKj0hRjmhNSYEKgoA/dk746fnPIILdeNH0e1CdA6lHr6PHcujWDh3eZmXg78\nDtGe50jbRDUUmuFZLAD5mZfAHZBTPv0rSt4C160WrK3bpYDLX4/wTguFAjCS\ngbQGvc4IQbkVsZlRkn36B3NBxBZ3v0tu+1IsOpXywYrJM8hjo0FW/OfPqHbG\nYmcBASFi4eU2AdntnUL214fkPQ1Naylq3yzjfX5f5cfF/taVzIk0UxeI9vDr\nytKAXdisxY2Ln5vmo7YyEdNNsJokuRsr7ZSTauJduotk3dfhiNHT1zNBpR0U\nzTEIHeo8hwwFD5iB+c1VsYqgd5su/2AkXkgITsM5Wh1xc21fPYYDTr+hsMA4\nx3gd8nKnGfS/bSxHNSzOzEg8dVV4M6dS9K/A1w8XvoKTtBLqyBvq/yh7rmzk\necPWQWPuiNG3se1JmUG42xOGgZe1eDZuJFqA7hrirmEq7gxIDuo3vKNEHwdX\n4NtKG9oTDxWaU8QOL6DeHlYWHU3xUW/NVg+qofzB1B+88pmqolfg5o1hMLoG\nMnx1V8b6z+Y817rSQM6D60rS4cAwyKNRuTS+U8Q0OBJtBnymQIJSBCY4zPTp\n80aa4mW8C6xgoMfFw+dl99bVPX5Uz/OtwVojdMBJ97tK4IqWocp/uSrG281S\nynVk\r\n=QjuY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIELIiE6roJN7dOf7bbtzBf+ULr2rrVCRWsPy3OYRq4a2AiEA1OWqoUvoRTbeMgD7Vzz3MEEVlpKdvcCsYQN+6qGfrw4="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_1.3.0_1555215192721_0.5808744999495266"},"_hasShrinkwrap":false},"1.4.0":{"name":"megadb","version":"1.4.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@1.4.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-KmoT2oAEShOFW672rZSvqh96xaXXYxT9etIKiLdurJ5DZNxGcy4P9UfsCtbKwydPSiXm/IQoUKvRodk85G78Bw==","shasum":"9e28b4b422875f6ab19d355c382f57435fee8fc5","tarball":"https://registry.npmjs.org/megadb/-/megadb-1.4.0.tgz","fileCount":4,"unpackedSize":67457,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcs6juCRA9TVsSAnZWagAABf4P/jgHPg9wIQkH2lNXuObm\n1G8yZOf7K1ZjWDWIax2mG35RtiKhK7A1RbPAa2LBeikhBsWq3HljTD7swOl5\nGPNzbhniwAkBNrwcpmMFbXvJnCAkMEfa9VvYoNBsGOxhj0urxRmdLffeHgl7\nKIPyv1FIy3w/dfSbvsy3jwf+Za4PGQAM1zE3o3qfVdFYtqKcouzreDMGA1fH\nyWsSRFyXg6SqW21GblaQSjAuszvZYLFSITFjfVhKIlpBwn5FpymCtVJzA3cX\n55rUuuTcbF94G3NqTw4QoxEzG7mIb1b851S1QHtsLmQkMNxKaDJOoT4GJw87\nNY3QSY7O8fVuwYXRTzV/bJUJHVeTciqx7G7+mVkwMJoDCqNDwA+GyziB/Pxv\nyUmlO5sKW+bWR/OiSWqir+3YO3smLRvLvcGWf2/7dsJnFBXdfpfVWTIcV8JH\nb3OHeVNz5B6Oh8NDw1yHQwzsb5HJmQztU0zZrfe+mrDxiQ68O5YzpEICVH9X\nbGB9ri715PmxMGMwe7FBcVdMBYzSrvL+Ck7U6Rwm2HSbS8YPi85r9gaD7JiL\nuYt3PNPLXEGRXvfvgVlXESbaGQazhZ9ig87V++HQjKWnps9shYkfslf3niZS\ngzoRiNQBz7/jXiuKzU6qJplZwEA77DDrJrPH7S2eASYgqHP26VgNydW8TiJr\n7XTW\r\n=qWTX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHt7K9Vb+p8PeOEJYM79lI4O7h5rPv9FCRTTLa+hT2NcAiBsiO7fAL045xzu1hDiKJQUpYmddr0nFJzzrCr8BfTM2w=="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_1.4.0_1555278061145_0.52709822442136"},"_hasShrinkwrap":false},"1.5.0":{"name":"megadb","version":"1.5.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@1.5.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-czVwYuH3nwrvqCK+V401sm1AwkYuDXk92AYScTYXmGsfhlksiY99bTWe+CVzZ6q2QVFLPfGZbME0piFjXuN3Og==","shasum":"1e400bd021da304da5133c4ea4ffa0b3ed1f6c08","tarball":"https://registry.npmjs.org/megadb/-/megadb-1.5.0.tgz","fileCount":4,"unpackedSize":67445,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJctBRcCRA9TVsSAnZWagAAtFIP/08+YELwooyCmKtqJsvX\nWKlu0X+9E0KsD0EBMJQLSVFUnWhe/moy65fedrBEKrMTs156AOG6pqGTtFbW\njHDcTFq+UJNdCXcMi32EZThW55az58Op16ntjcQkU7OL2IDaVGi9G1JRaJxM\nmLeSZh/wJ4EDjnOoJ8/9w1+cxJocSAl9UuTOAp4tJ4RGGDg37j6T19KHZuJs\nIRqKHM9vPbuwwT/4zxWJBDagz5JKpBAa2OGAy7W0l3xhfHhzKpiu3iW13+JY\n2b3f0blc+X/Z7IBrqoWP8PV3Bt8SFglCxFmDb9aaQ/Ke4CUmSaPQ9D2Nj+ex\n+txOfysrd12XlwNTLK7hS64G/WYrjNK1OSl+CqjXpEa5+BtJqFDHQURCRISX\nB3M5C0K6f71QjKnHMeDMKNe7RyRcErmWSx3nSSIJL9CHDyWieSHLDdP1Pa5J\nzbpGXLDghmuJpC2GQQ6kAUo7u089gXDI2SjEB2WMsP+KyFsoJ7kHmKzf5860\nFsj4WDqktMZ6r78XtpmZRFYPJdypOWEfN3/jXFLMYtdAMwWzWnC8sCyv5+wo\nosaaU2R8ugVwxJg8wNVpVPkeogQsrSSo3ezDY/4Sd9E3obg1Y6FbCCpxDJAl\nTBQXktSYMppB5PEYVlMphllMdWk6LiAia6yfwaW03AuYCLCGnYrDWv5+351g\n5ztJ\r\n=8cW+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBNM/Mhvs7WRet8aReBeDqPnG1gGsMsJWGU3HYN3hUPBAiA2s+o+6PCz1XYHFJuVV5afQSR7EQAHWZyGoKEYI9H79w=="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_1.5.0_1555305563469_0.23688065837134142"},"_hasShrinkwrap":false},"1.7.0":{"name":"megadb","version":"1.7.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@1.7.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-eAp0LHgn8rhOebHYhpKb+SyjtbO8GD1I1o1H4D5BqCuwIm6A+qJ0nafBQxsNOTTfjQOb3/MRJXVligAf9i8GFQ==","shasum":"44f64c0b7ccc8a39bdbb64f0084eeaa2c3523d04","tarball":"https://registry.npmjs.org/megadb/-/megadb-1.7.0.tgz","fileCount":4,"unpackedSize":69031,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcuNy6CRA9TVsSAnZWagAASDkP/28grv4kZZH6RpFwl/db\nTshU6NNLEVIFJSF4J6dbmrkzk2XMybGIq1l0lnNA5KRYiDtCknMiip+TRPJx\nGg6C8D6XFY+l7wSiIdIxmmqtvXUsTr7uctp2imkmBVxoSiVF6dSextOriprE\nmmxy5c0ZS157YhpDvVOMpHsUltboKIxeIJ6PBvmyiEXkzTgu5vU56KfgN+XD\nxnfMVxTVwd4X96RUumcPR0sVnNPkZ8Yi1rXV2lDn8Xb4IPBWpWd3/8eD1+Pd\np+433ezV53azGYYYfP2ipiGjOlVVV5Y8+ssLT8nAd+ForGQw8kChxIhFiqoo\n4uGl2Q3zeZgDaX6MGipufLUG/Q4kCseTzW6SOe+HDriRMO0/8UPAAHxnrgot\n2tXjhPK0PdS7e6A75Y5pBUP2CWwNqEvmwrX+xLu32hDPxvhgQXSNsnffVY84\nt+VOwSRa1OKs2E92vtocdB3YugHrjPBsv8I1OlN8xVpfncYBQpqDP1KKg35g\nljFv150WKOdPWH9ksgDtA8PvxmzGRFrUTiunlwmrXfVdnzgt5zs9NpAd0J4o\nmNbM2Tiwn0v5XjWXrGaaNqjZm+bQnFV11H1/zvuz4GqEP0//izaPm0xx/q4/\naIDUqcqv+DTSnSo6FYlGfdIJhAr6+t4O12p5KZCCSt3SZrF0QeGddJdMJSPJ\nem7W\r\n=Z31l\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHPq0Dr1Q7KrnLIX4EcjEy/xgwTCUz8mSkN1BsNoZkF9AiEAwKkaZ53kHVTatDBbRs3zBtgKVgLBBhngIC/vztMvmlg="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_1.7.0_1555619001490_0.8861688092345801"},"_hasShrinkwrap":false},"1.9.0":{"name":"megadb","version":"1.9.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@1.9.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-gIWfNMVO39kIInjkS3H1ODc+xbHtl6rWQm/edLhoBcIn/K3Eyvv+sOjISHdrxVNIoxvWtSlMF0U712Yh6gNrRg==","shasum":"4df43c65928e8d6b206f0d76d6387fc91e0931b0","tarball":"https://registry.npmjs.org/megadb/-/megadb-1.9.0.tgz","fileCount":4,"unpackedSize":76866,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcuVGuCRA9TVsSAnZWagAA8tYP+gMYCjOoo9NDmUngYHxe\n9uqqm1EYlQRxlaMgxRqhUeJV8zMg5JCfM1ak01RYZyQp5D31yqmLRjNKHEA4\nR+ESoP/Yv4rk84GcavAwg7UGVPlionUD9aiUEyALHrNmNW9xx8wi69xeJjiI\nvA4vZZP9boS8tA0ajN1GmXnmZh7dvFIARtGak9aZqUUMuZlp5HqzuwSEUmdS\n5nb+zmE3ZhuWwCQzOgyKA6e79vTRZQNAqQQvs5voSYyajvhqmPfgp6r3RNhP\nqAtldEYk4ZcsUZBi53B8Gqydb/zDLCQFVktlwIqlM2Yk4o3c08Vw5QwZFfBC\ninwfesa7/Lso3gxVckH1Jh9u6eMdRNALNgyKene2E0wqLM5+lgSlIIqRGFAx\ng/IM3f2iJIWWjH1cj+bSxmEBvjAkGP6GaV2YaSOhLI4PPzQKFwqz+o7z7mbw\nIopLmxp5WRc6zg+B/b9CKcvGbfURr4oKnI2qnDWnvOW7CQUnZFhCzWGgIekY\n4HGL1jgn/t7PtuggW6TIFyJKYh8So94WzM+Qrtqv5crCMBMCrHB4TPrpJdMc\nLKLguCL3d2RITMZ7n8SJO3nALxuZhvFXJXfwgvOo1CS9WecnMOMJnHQNaPlV\nSJ77SR9o+6irsAVWF4hr6cLVTnjAawfcuyYcR0IGYWrEqtwYi12guKdEuc9/\nc4L/\r\n=CHoV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIERZfOWqG7KWDKhzyZotlEMBxAAtQkf4saRkxXvf/flGAiAuVrDG8lithPpXH6Gmv4UCQe6fT+mJNpHTBoLJGlTBPg=="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_1.9.0_1555648941938_0.9311424245194682"},"_hasShrinkwrap":false},"2.4.0":{"name":"megadb","version":"2.4.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@2.4.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-f2L1rcVl4GfRkGQWHyLgAMm6al6n3jXx8dgYsKbVqP3d1WX0sssjWSQ/syc4c50q+ZWHBFG28KSGNcGiDEAasA==","shasum":"47a71c243c2bfd4fec6dfcad6f65e17f2e2bbcb5","tarball":"https://registry.npmjs.org/megadb/-/megadb-2.4.0.tgz","fileCount":4,"unpackedSize":95827,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcvh+pCRA9TVsSAnZWagAAdJ4P/RB0Mlvrn68s0iK1x4v0\nmlEqlzB2sWz4GI9uYk0UbDFtSF3UFsUsVIaOp/NGggcXrID2lx1hJPArDRMb\n1vLwyCrklxxeOhSUxVHALEnz4NZWJaUY8wiO9Bw7IFmB9w7ly+Zyb/KnVxNm\nZ/pNml0Y4VLBnGZNFH/6HTqlB5RQkOLgwhYnlL2IbGpQffOOiASC71yAi8KU\n6/16sMu7hyz7asqc9RVVw5hS/qXqVjy4uhLq3Au/THtLLa2+gUslmL5dfg+k\nMyCNuVhUm36VhRTq/Z5JBDVHT3xo3BGfWxg3qed8mqLIVZoKzm14yFCU1lhy\nIdjGrRlVyVjvYUu+uUbh4raFSJxRYDFi4TbBZVGwaW72M3aA3V/2ClLXIo6t\n5GxcWwkwiVCQD5dwEIboaEZYYpJVmJAC9ac8KvVqroOv99Kq7j44MyP77vM+\nyU0K88KpUvJytGqRC/ZCYSiJJyvLjMYUHPxWEjUrt6PJJHTMkXduXHf7/ESz\noDRk7h6cf5p3W4UwkvPI7OyblLwN+BINxxmKu508tdnAVkjNiVqYABDp5gfJ\nPWjvTpTluyUTaMaIl72xICXhod0e0XMfUwsQorNicLrS4RL/BUnUYDDuy8vJ\nggZXtuLdMMSTBOp5IpegH71KwtXm+pEuJxfS9yRU6Sl55J18+i8C7eGDseED\nXSTe\r\n=pl8c\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDx0qhIVGLpRVckcdKUgFW9myhSq0sVjOPz8waYV9tCCwIhALqnzbyV2AtmOFBl95UTCqW53/NkbZEKI0dYzDiYeUxw"}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_2.4.0_1555963816652_0.11444738440697777"},"_hasShrinkwrap":false},"2.5.0":{"name":"megadb","version":"2.5.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@2.5.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-Tng3OmKowE5a9E0gCQnRpVAdUoXerzGCE0k1AxggbH/4aMhgEq0Ff3NfSElBeBlB4qZOCAspA+qEsR+iw9qYLA==","shasum":"4ea2f1a0d82a168e2673f82ccb78277a65e0f771","tarball":"https://registry.npmjs.org/megadb/-/megadb-2.5.0.tgz","fileCount":4,"unpackedSize":96437,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcvzviCRA9TVsSAnZWagAAoSIQAKTehghUhbbeQTr5VQZk\nU/raMrsFNKqRLmuViql1L4iDeJy4pcjkOkN5InIWha6EkGcci4yI8UBJJ/kQ\ndR9cC3OKyVep8Y4q+/Ym6p3bxASSBrpC873C3RA+LZ9hCpuFeTMcbNYvTH7t\nLEKnTPrAYWbF3tFdNmj5izOdmxhvtYL4P1I4I+4HKQ06foABHk+RpgGDnltv\nZorqXQmlRyreLC56FkxKmQ8g9A+/ixS4/4/g/IDv/Cs0jlZKHGvKRJp4joNB\nSC1G+MIL381Ti4ou3oWhAZRdChO26fr0rS8gZQHNfgBPKFOacjOUDx8ZHtEO\nm4XShpMjS1hb5OPV3OYnZNf2VVqE1fCdLGAp0dA+Ja8CCJ0EhSzgRD9wMpkt\n4swLKKdiba4mLLV9EG51iFi4ZjKfx1qfXxWvSCzEKf/rPHod++6i+UVFUKFg\n7kHHvVohacz0rcC9kCoKPTwc7xCjlHU6qfWDFwtyPNCYvvYEpSPBoeDbM20s\nwd5FHl4+R5rka7qdutAVV0vsvEMhmXdjgtDZwfQAsB/WTIUdELi7Xf6PCEJB\nftbpd6C0uzi6Yky5pNGb8V09o+GCXkFwiG0l0FRm+6uPBB5bZoB1wNXaYof8\nfza9h2Hijj9tBPxIoDkV+/wBgDQXxyiXs/zE2ganNN4SrfJd17qdmVuUfu27\nGqNz\r\n=wVgy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRj9+IpVyOOaga+ndwux3eZJZOi2Zy/fpLx+zCCej1RwIgbPOcaM0j9vAm3/oQsXmYz2niQu6GuMmOXmSg2LLom9o="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_2.5.0_1556036577262_0.34491588782276295"},"_hasShrinkwrap":false},"2.6.0":{"name":"megadb","version":"2.6.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@2.6.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-ppOTCChciuh7daPLYtm5bjIFrI1QY1I5t0r9g/9PtVUcy1/y1RckwTzK/FnZwgmJNCeLmJ+vzx90b0sWNYSY1A==","shasum":"f64283a2a7cca1e0455a64d48cdd3874470b115c","tarball":"https://registry.npmjs.org/megadb/-/megadb-2.6.0.tgz","fileCount":4,"unpackedSize":94403,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcw0WmCRA9TVsSAnZWagAAy14P/1z0AluytUvYzlav3H/w\nhrG1MoeuJqVmZ1waFTN6annnO0ddyGJ9/q3L/7nZOhxinoA6Mjm74bY/tYsU\nMlDH/DfAAQRRUkVoGzKSLK/ZeNXCWeOKxx/em3ro3RlrvbjO7eaSWLIvhywY\njxGF8+5QxwSjbfsKEY1ghSYcx/aHuJp483ZVG6cmIgwDuW7ZT6QcbnXLY4K7\nC3bRytu+sFUrWFR2SrJbamGchz82b9xF/dteaTT2S4uByR5NVJpZnLigeUTL\nzKfHhr/jqICdqdMvWkIvfuZOhyF/YSo32MenQJgOkvVwdSN6Dr2DAMuf2ilZ\nNyXvr2gFbgQu8/QKCZXjwRaWv0hqklRGBjy4NzYygX1Md02UL7Gr+4QLQs25\nG8wvAheadKaIm3RY+2aYUn5j7vXWSyvU5Pz4xJEtzdFIhoy6Bm+tHIqo33Qj\na5GTzSVuwNMyGFOv6LHa9nUM2A+Wjd9lImuju0pbRTB6yln5avg7QzNl/3pG\nL0jS6LoFBPbXSgjPWdVvS0VdYEiKh57KppnT/AGmG+iYhpacrxqQaSY0KT6w\nBDdZqWBBGPIgswc/A9ohnizDLiBFY08nCNqyH1q8dYiy58QzXhT0esQnmp2p\nOyj1U6GUKXnG4mHOcAMdnG1SESMc/DUqSia0XRdKeznQOYEbLgP+9FONPFWw\nI/SJ\r\n=xO11\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDI/NmtBuKiTP+VSmSclBpAinPrx2a6HfMCwbWLFGjo+wIhAPeiNTNn6q8vHnqGtsfCCdqbmP3CgxavOiQd8E6ygt6H"}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_2.6.0_1556301220710_0.3542275385609921"},"_hasShrinkwrap":false},"2.7.0":{"name":"megadb","version":"2.7.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@2.7.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-oq6e45um/ZCmOgo8GP6nH6eDoSsN+gi83hnjSzAHHUDGQRKEvHgbijpZVZMxqhcfiZSu83whJca85Z4KJXG32Q==","shasum":"d7e81da36154a2c7fbc32b8eec9722f923209a85","tarball":"https://registry.npmjs.org/megadb/-/megadb-2.7.0.tgz","fileCount":4,"unpackedSize":97298,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJO9bCRA9TVsSAnZWagAA2L0P/jSuQcwqwqHRiFXy5rY3\nIi/RAoquT0Aj14NRp8rNRwVC0Gr3Im6QjWx8UIcQQb3N+t2eW/ZUcjJQB4Xg\nhPP462K2LusuCuHK4iLtbFH+e87KLcdS7U/D4vF8CNMKeBHDF1BdpZeP723H\nNBGFHdzglq2uO1Y/4xFlskTfXTyfImQEyl8/nlvzD6svYrCYPIPqSqQGhIPO\ndBylgmLqiNuSk0YcUWz5VksvSNSU2qlTZrgxiYgLlUce443/UhU8eSbCc3jo\nau8BxOyatkh18XmGoDPuItTwn0OBo3AUrTGkTvlbK2q24H1f1RbyxYCxYK1n\nY3KtouWI+unQR8dcRcSVns476vaT3z1j0JcMfQDM/XRja84rXGHiFmPk8vRw\nh9uuZnrFn/YNRCJa4LfR3ZQftQUCBCtaLsnX+hvakaYFRRDJ/JbFS87yHm/2\n+wBLYv6r0FaU8XJ4VtIfOHEDpGnMZRk9RTBGjD0Uz24nwY2flNgNvBjQkz9C\ns+3zu2zQru6a6TnZpNEQjO+miHxKCZ7s3up3A1WO3CZiWDwmTWlYpC+zwvN4\nv5nbXA5Oi8hxlW5b+TrHg8lyM96t0NbOuxYImnxZGqlgfyP49qQWXwTpHJGm\nxX9N0BOos6gJb2+42n5OMU+E0NzdIyQjBeqBlMjB54mMV6IF2kLfoHnCTKyj\nb201\r\n=zYjS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCTGyXAKggpIwJtrCAxuTXEcnmbN9cSRppgiU3YxkxlWgIgbWONv42Bh1BQMUzwWa+xJYVqrS5ltsxoiHADVmSIvj0="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_2.7.0_1562701658167_0.44284785293121365"},"_hasShrinkwrap":false},"2.8.0":{"name":"megadb","version":"2.8.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@2.8.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-5ul3bFn4kEJupjelLdQCZnI+qtnLGM+Peww2k0Uf1uZdXN8rnhuarBtGgKo/5w2tlEVr1o6z+u6+9xr/iZijWw==","shasum":"36f7c260eac46c2eeb82cd0888bd476f7b4c98d4","tarball":"https://registry.npmjs.org/megadb/-/megadb-2.8.0.tgz","fileCount":27,"unpackedSize":117401,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdPhtxCRA9TVsSAnZWagAAN28P+QGSCtSlksaa5ZLa2vm7\n0aRbgGfvLG5Uvt3BBW4rAV7ucfeQaLs4YBgxgW+RPlchC1Sw56x3YhqYozvJ\nNLfb6jAJ99YzE4NfxIfK9MgjRVIi79Y1R+4/HXwpJrU+LMtuBPnrTh/AxLBV\nHBdwyVdczLIkr3TctgUWO5NsPa5Ny6eClxX4X6+NcSNq+VsK4Tmm0V/ZLEE7\njWkOuuAF+ENzCjv+uMiS9KdS5hnH/RST5LalbMlOu1HW0H4d/5I2gtZDTWYP\nMxnO5OAqiI90T986X3qOkEs5OSXi6pEyJGoPLxXgCkeca/GvvqjYkqLV9BAS\nUk9g96PiE02tlteM83l1zQKgARuxpHqgRTdB+DZh8pnjVmY4iDC/CnPFYCWh\nGN4FTxVtvFRqfp/sMgpozjojMdDRQzrmXkbRJT/ruTGo0j4p4Nu/nPXcEAox\nwZK3yPPJXN/61H2o2k0mpIf6LZ5ieuFrEEtMdLm8LtSGs0OguhzQNE5qxRl+\nOv87tvMEkrBAp4vNMVJzKmhmeL3qZcvuGtHDcciNd+YfP6BSsMha821mmQrB\nfAiPfqu/Uy1gnjvSNKj5RKgWM9CWI71pKLNt6xOBrTFxzg35NxaZsJGpLq+8\nCrF6/GoHT7fpG9spp0O6/5/JkJRg7cLcLFjESgu07DZrohLnCMay3GcKYgpK\nIeqk\r\n=SJbs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDPV8xrc/+qVcWpQdIkUs7xqZbWk2Yobd2nFKrd+IKc5gIgeD2s4Dknjp15nAPRUlUKRzBbRg8Lxvx+Mq4LKtASP10="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_2.8.0_1564351343945_0.00980063864035885"},"_hasShrinkwrap":false},"3.0.0":{"name":"megadb","version":"3.0.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@3.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"dist":{"integrity":"sha512-gzpl6lvXvHEvAYJ3jR3H0RPFvxE1PIOSy7SPgAVs6bTc8AovfCvrhM/1FxNI0jK9Hlt9c7AOQ0xnFuYHzHqyXQ==","shasum":"6a65d6841ee27119f92387ce3c744e2c4036fb9c","tarball":"https://registry.npmjs.org/megadb/-/megadb-3.0.0.tgz","fileCount":29,"unpackedSize":129761,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdXXTsCRA9TVsSAnZWagAAlL8P/RRfoFRm+m8chrd4oiF+\nKTFtDpTPIe1D8fZCD6r201DDDbdGpBomZdMA5G8j5cdM8WrHGc07BLwF2QdB\nzrn6x2KEbE9OlDR6kEHxqIoy2H8GQI0DVkqM3cmzjdPafXEAToIpAXlc7//W\nQGLFw3KoH1i3C7bXAiEZrAVcnN2KcpwlZ/pYJWSnFLvEnJXU7GPT7nIQJcvJ\nG5XONbKiGSuwGVziz7oN+fp3SsDDKPGwLdmKayip81RYmP+ZsQzAy2wdbqWK\nMe28hqLwGx6K1Ay4q0qINqCmi2HAwKJQfr6o4br/+02OEXMwcFICHYjvnabc\n4aCS1YTj1Kq3YMinf0UvXzNc+Ng/YQBi9qHFNv+lmZvDVjxuLGrkvMnGi8e7\nuky6f2C6ewrTMQKsst7/9jp34FMmscevw4sb/xuQCil5XodjnNQ0Pswk8b9o\nW6H49wSczCwyi4oXrgFGDoHM2XoRLJ58cgF/IX58O0KH8Bb4E8iYRmhcUqpL\nGUK1fAbrdCA+NhYBiY0gZYkGxt9d0qCdk2LS2mds5RTGr0u/wQXtMR0r1G7K\nGZJd/ijhlOicYw2QVkmlrOpv+sN56DPQLheDM1997HV/isDWjEhyWX5iN+Rw\nUW9gpjJbHyh3EEsajwAdwssffEkdFnHMSP3Jb0t1y9zAFUpahP2C6tEeR/Kg\nQh/q\r\n=u33n\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGE356M2575Gzr2F8DQEYW33ajUu9/wACF2WlGnkGPcGAiBkmMknJ3K5fE5v5uWVawYvJmui+H7TmZBApD35Jw6bqA=="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_3.0.0_1566405867125_0.012140056048250969"},"_hasShrinkwrap":false},"3.1.0":{"name":"megadb","version":"3.1.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@3.1.0","_nodeVersion":"12.16.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-462X1qXbxEwogMI/YH08ZpMA1WwhnGcUFS+QSmWqB+sznuVJlAdR12GMqV/+ZEM4n2MjzPrifbSmJFEE4e6scw==","shasum":"03f4031c903af8304cb0d7c5588597b33336a504","tarball":"https://registry.npmjs.org/megadb/-/megadb-3.1.0.tgz","fileCount":31,"unpackedSize":140647,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJerLfuCRA9TVsSAnZWagAAXKsP/AxOh9S/hWm65MxosAfB\nwrRs7+odasCaiGqLMpWauff6h4pUEZujIYlQ1ZsIBlDWFZazRpf9EMOGHG48\neiyRlObD2VOMa6mDm1+l3zJzbVTx2wW9COoknzVhOTH7VvRyM5qjUiQqjsTB\nkeZ6ABAbtH9HOdyXhzZr66lF4qWcEqEXEju5KpMFEbxDPQIB8pxJJwHq0GvP\n5w6xn7Om9fjf6auLE+bX910xsSeWNiM1RpxDzueAVlTJbfJUosT0ru42Ry6l\njCbySljQTFMJTgtmGN0m0kKymnl1PmjUtTGnoV8VJ3rlD+PZ7I9MEG9xlV0h\nW7pntcsjkDRmtL3X9kwzlTNG3CaPKS9b75EJ5Oi0IAHNu4uGeHk3MnfmQbIX\nfOcGTPUHLJK2Qyd/Er/HWetU/NngKHmfQra1q+YPByMOKPQViIoWBZ4WuaJN\nWecp+E/SrcdpG57jyfaK/SOLriWYzFlBS+/yiGMq6RjzfZlmri9kJtGdcP0o\nxxBxepMrZEbZDjiPCEraF1Du1RdM466MUAYYFCS9wttOqoaKc3KZn4124uDi\njAWL8dNW8jrJ4DzlWCuViQy2ygI97Q8RCCNHr7AE15xibXKHSYiQnXpXN33w\nNV5uKMm9yBFD8nTBCTsIyfROsk70ZwG8lvr99Os8S6tJe24uFFUi57HGYNex\nOyr/\r\n=7NQo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC/2cXLG2lB9z427APL9mRxbPwI4SvBOOq23QVvhG3udQIgEr26QNsNxyvDzgsvEdjGLWy8H9NdoFcBLkCKExcU1JE="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_3.1.0_1588377581346_0.126849634792644"},"_hasShrinkwrap":false},"3.2.0":{"name":"megadb","version":"3.2.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@3.2.0","_nodeVersion":"12.16.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-daRHBe2PXKCGhwXV+H77ARike/3FpCOWoL9C/HWST8T8poV6fMI4vEN7+Wbznq4xyE08/78VOT++43j+WHfpxg==","shasum":"bb66995f300f9992df63121fc25eb2ab1f37a4d1","tarball":"https://registry.npmjs.org/megadb/-/megadb-3.2.0.tgz","fileCount":32,"unpackedSize":141017,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJerNLGCRA9TVsSAnZWagAANFcP/j9zEJetd3k4kfMw4w18\nsuV9JUYVKKOypmV/jNoL+i7DNIn9w2ps1ssjvP32t8zEYT4L6egVwGX33GtC\nK8izeP5LPabKsb08IshXCAe9HKJOY+IKEDbMj9yL6OGfY5NhJVaGCa7MrV3B\n/6yK2LwYHLygiWarA83o6B6tcfaKDNVbmeva90XO7jDhWo4qHnywCRkN1Nnf\n3MSn4HlYkBOthgxd99p32DIrcP5Lk0xsSERQYXzkWCRkM2zmW4Wi3Bxsnhti\nIDPsNGtJ49Aq5kcrYI3qaY90XfhVUrdvkW+fqNtlrMKJ6pIwl2W3s3WfZ7s5\nGjpP+WX3VDuw6LL7SHRQooAUmMnpR7qxcO9PlDGc7nRC5K3tKkRMhhGUs7wv\nQQZCu32uIB+9SkybUf/mns2gHf97h5PFFlA5l83D3rO/osjIxUbnMw4L3IkA\n1L7iJRyYRlrtKPvDmlMmU5pZJ4nKSCSEgVkNmv7KoMjB0bNSSShlTfpcxCp3\n+lJxyg139RLjadjISWdkIuCx/MQpGbPl4FXaKBxUlOQ+9fnGOpSA+wfJDuOp\nU6+N41IuHiXzPYS3EIECDtuL80KHRK1aus0hJmx15qy2Zu4S2pOPiKfnYyPM\n4Cm1cJULqPf7CwvgDi87/CTh7or9x82drZcH5PUEHIowBVyn0IYinriFpP4+\nrF+c\r\n=rCr3\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEIeHU05L/Hm5mFor630qY+KcyzpJ2csOWztbMBXyn+sAiEA3SkkbN8CLpHMUNPxkWfHkZ7vGdNtKzc3DDduicBmHeI="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_3.2.0_1588384453383_0.5928680791204601"},"_hasShrinkwrap":false},"3.3.0":{"name":"megadb","version":"3.3.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@3.3.0","_nodeVersion":"12.16.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-pM0FSuC8pTD9Qc8hffxYKiRlnJ24PgcRuxJkBO5txsp8rEI/8UahoziwCEWPAYXqeHetNApn3QL48wk1zJuk4w==","shasum":"1c68a0dd61926499bbffabefd414789c2d4de702","tarball":"https://registry.npmjs.org/megadb/-/megadb-3.3.0.tgz","fileCount":32,"unpackedSize":141017,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJerNQbCRA9TVsSAnZWagAAVqUP/1lP/TWh2NuWweohzdH+\nIBgcH28imF+96V++tkTpIyDJQp2ec8yWUI7a2HFIzDHNnq0HSWnoXyd9LKEv\nVH6XOwGgcM/vh3P2Bgnc/kIW0SInrAnyJnjibBJUY0rXm9N6p40BH0Vrixsb\ns6UywNa9bhBPZJHfweCjSi1OPGLjSuG22A53EeuHBJND5JycIiu/hMBYfrHp\nsMDzf6sOn1FiztREotbmjX+KGH9P94r1vm8ByUKZ+cL0dyV0/3uj72UN1ONr\nAdGKdwCeiol2EOplimkCdJTSXI0Hv7rcPT4hF3ReaypkU5ybNrmBiYaUWg9a\nUBr/kj+WivY9PG2xYbGdMa07qKR/jpkrwb8gXSBGzAx5b8ahk/rmu1OFdCtw\nWIRLxMCWqN7TTnXvPeeITzFOS7QEJUXd9+tnsTxnIKRFpnpP82Eg2ovE9w0V\nFXM2ES/9wiNX+EN54/b6BaAweSlMAcUPnBzmm4tzl+aiB26EDGGUteSFHE+W\n4EffdxnOcSzMPPkrR24aK1JEuBPNQQZXLF8mNUxpYJwqGcW8nVv4fCklLqeB\n7wzyKUIUQQ24jsNYVASly77aBmJZb+gi7u9NHJhqeTicdnjnhu0s0pWo4qYV\nGf+y8n4NneiDx5QOFmRX/YhA5I+NNmOg5WkS8YOUbgmxlf89m3VmRlNhjYda\n9O9D\r\n=G1nE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvz3T4BMP8sNHuuAJhYKKTbGzPB+6a0foLiiuTf30yjAIhAKqrfur62WfCXZP1cQuK1vRFL5jVplr0r/Yz9sQkRZ9L"}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_3.3.0_1588384794796_0.4702139697407317"},"_hasShrinkwrap":false},"3.4.0":{"name":"megadb","version":"3.4.0","description":"base de datos usando JSON","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","dependencies":{"graceful-fs":"^4.1.15","mkdirp":"^0.5.1","path":"^0.12.7"},"_id":"megadb@3.4.0","_nodeVersion":"12.16.1","_npmVersion":"6.13.4","dist":{"integrity":"sha512-e4wFUFvAwFChkf+M9xNt1e2haKpnyRfrK7FVPdfUjIp6G/kNJEG3HMttVn4bybkHlHtZw+IDYBsK9aGfp5NsDQ==","shasum":"4618e7bf011183139b572ef561062409def5cd4f","tarball":"https://registry.npmjs.org/megadb/-/megadb-3.4.0.tgz","fileCount":32,"unpackedSize":145553,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJer2SiCRA9TVsSAnZWagAA39kQAIBxGj6Y1CyRx8CYQyu5\nh5UCYFovcL72UHYqJCqtpvXcDw+LCeW3669FTBsYwgZD7855M38ksNOq20og\ntXxRm10LRoIjX31DgGgrTpu8FLOB9RbxgM9dtjBp7HIsYiNiuFoeoRsQyrR9\n8bHhFP2fISrIKJYuL4AngQ/0+EcsrYvsGxO5mwyesAC9naieKOQwhBem9wQR\n3DhdoFZ+84b4HEIZqWTHLRzY1amWvUoohGuQ41PBxfeXvLBX/FoBW1IyjY7x\n5iDIVe+2pONAD6F7q2WRi4eG70RAh9SBwWoxVx08p9pSgASlfftILdoiwCFJ\n0gQ321W6Z8hka8MLAuiCuwm5hk24qJDVkwkFhGVp350F+urW0MaPPQuf6Tn0\nwDdNcWLE3kqNHfX1sFkWPDOjn1gAWYTN8f4BRbBxI8BJqL0JxFfS/tSemuOI\nDWQINKVHVk6AURAl2udH0jJF66bNQmRhfs4nErwA91IDo3esf9p5M23TPlh2\n1paERE76+nZ1jf43NOPYcOPI7M3aOmPA08Kumu3AMGZuf0hzBsrWaP8jmYdm\nbZFdCb+H+kZSbB/vxUZW6kdlrtbNAFjQs8frE4EdxhZO44KZDGONNB+3aP+a\nNjY1XjJ//yBoXDr12n2db0iKjpRsN8uASUzoQ60lr3OKFsLEt/wUxIW1oUmZ\niB/5\r\n=PlWU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDPkRcsDC/FAADAPdzJ7ss80ft22aAogA1CVLuMMvoIWwIgCJl7mbrQ8xxJOAjyRJss62ssWezY/cXfBbL98/FNBPs="}]},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"_npmUser":{"name":"megastar","email":"megastar12deuce@gmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/megadb_3.4.0_1588552866185_0.6585630044564643"},"_hasShrinkwrap":false}},"maintainers":[{"name":"megastar","email":"megastar12deuce@gmail.com"}],"description":"base de datos usando JSON","keywords":["database","JSON","db","base de datos"],"author":{"name":"MegaStar"},"license":"ISC","readme":"```\r\nEste package es una actualizacion de mi antiguo package llamado mega-dtbs (https://www.npmjs.com/package/mega-dtbs)\r\nmegadb es un manejador de archivos JSON, contiene multiples metodos las cuales te facilitiaran las cosas y podras trabajar de una forma sencilla, persistente y eficaz.\r\n\r\n```\r\n## Mejoras\r\n```\r\n- Ahora podras especificar el directorio donde se guardaran tus base de datos, tambien podras usar sub directorios.\r\n- Se creo una db en memoria (ver el constructor de memoDB)\r\n- Se agrego nuevos metodos y parametros especiales.\r\n- Se actualizo absolutamente todo el codigo para una mejor legibilidad y funcionamiento.\r\n- La base de datos ahora es mas persistente.\r\n- Errores descriptivos.\r\n```\r\n\r\n## Importante\r\n\r\n- Por default se creará una carpeta llamada **mega_databases** en la carpeta principal de tu proyecto **(puedes cambiar el nombre de esta carpeta en el constructor)** [crearDB](#crearDB). No borres dicha carpeta a menos que quieras borrar absolutamente todas tus base de datos.\r\n\r\n\r\n## Changelog\r\n\r\nv3.4.0\r\n* Se mejoró la descripcion de los errores.\r\n* Se agregó la posibilidad de actualizar la base de datos(con los nuevos datos) cada cierto tiempo para evitar que los archivos JSON se lleguen a reescribir rapidamente, mas informacion: [crearDB](#crearDB)\r\n\r\nv3.3.0\r\n* La mayoria de cosas(codigos) fueron reescritas.\r\n* Se agrego 2 nuevos metodos (findKey, partition).\r\n* El metodo obtener(alias get) ahora retornara undefined cuando no se logre obtener nada.\r\n* El metodo filter retornara un objeto vacio {} en lugar de undefined.\r\n* El metodo map retornara un array vacio [] en lugar de undefined.\r\n* El metodo some ahora retornara unicamente true o false.\r\n\r\nv3.0.0\r\n* Se agrego 2 nuevos metodos (setIndex, delIndex).\r\n* Ahora puedes especificar la carpeta donde se guardaran tus base de datos, mas informacion: [crearDB](#crearDB)\r\n\r\nv2.8.0\r\n* Se agrego el metodo some.\r\n* Se agrego un alias en los metodos: establecer (set), obtener (get), tiene (has), eliminar (delete), sumar (add), restar (subtract), ordenar (sort) \r\n* Se creo el constructor memoDB la cual hará que puedas hacer una db en memoria, ver el apartado de [memoDB](#memoDB) para mas informacion.\r\n\r\nv2.7.0\r\n* Se mejoró el metodo sumar y restar, ahora se podrá ingresar numeros en formato string, tambien se mejoró la descripcion de los errores.\r\n\r\nV2.6.0\r\n* Se removio la comparacion de objetos ya que esto se puede hacer fuera del codigo.\r\n\r\nV2.5.0\r\n* Se añadio un identificador interno para cada base de datos, esto hara que se puedan diferenciar en caso de que tengas una db con el mismo nombre en diferentes sub directorios.\r\n\r\nV2.4.0\r\n* Se agrego 3 nuevos metodos (find, map, filter)\r\n\r\nV1.9.0\r\n* Se agrego 3 nuevos metodos (size, keys, values)\r\n\r\nV1.7.0\r\n* Se agregó el metodo purgeall.\r\n\r\nV1.5.0\r\n* Se arregló el readme.\r\n\r\nV1.4.0\r\n* Se arregló un bug en la funcion obtener.\r\n\r\n\r\n## Constructor:\r\n* [crearDB](#crearDB)\r\n* [memoDB](#memoDB)\r\n\r\n## Metodos:\r\n* [establecer](#establecer)\r\n* [size](#size)\r\n* [obtener](#obtener)\r\n* [tiene](#tiene)\r\n* [eliminar](#eliminar)\r\n* [datos](#datos)\r\n* [push](#push)\r\n* [extract](#extract)\r\n* [sumar](#sumar)\r\n* [restar](#restar)\r\n* [keys](#keys)\r\n* [values](#values)\r\n* [purgeall](#purgeall)\r\n* [ordenar](#ordenar)\r\n* [random](#random)\r\n* [existeDB](#existeDB)\r\n* [find](#find)\r\n* [filter](#filter)\r\n* [map](#map)\r\n* [some](#some)\r\n* [setIndex](#setIndex)\r\n* [delIndex](#delIndex)\r\n* [findKey](#findKey)\r\n* [partition](#partition)\r\n* [convert_megadtbs](#convert_megadtbs)\r\n\r\n\r\n\r\n## Instalacion:\r\n\r\n```shell\r\nnpm install megadb --save\r\n```\r\n\r\n\r\n## Ejemplo del requerimiento del package:\r\n\r\n```js\r\nconst db = require('megadb');\r\n```\r\n\r\n\r\n<a name=\"crearDB\" />\r\n### crearDB\r\n\r\n```js\r\ncrearDB(nombre_db, sub_directorio)\r\n```\r\n\r\nEste constructor te permite crear una base de datos.\r\n\r\n\r\n__Modo de uso__\r\n\r\nEste constructor tiene **dos** modos de uso:\r\n\r\n_Modo #1_\r\n\r\nEste modo es el que siempre se ha usado, aqui debes de especificar el nombre de la base de datos y el sub directorio(opcional).\r\n\r\nEn este modo por default la carpeta donde se almacenarán tus bases de datos será **mega_databases**, y si esta carpeta no existe se creará automaticamente.\r\n\r\n1. **nombre_db**: Nombre del archivo con el que se creara la base de datos, si el nombre de la base de datos que pusiste ya existia, lo que hara es devolver los datos existentes de esa db.\r\n2. **sub_directorio** (opcional): Este argumento es opcional, es para especificar si quieres que la base de datos se guarde en un sub diréctorio dentro de la carpeta mega_databases.\r\n\r\n__Ejemplo__\r\n\r\n```js\r\n\r\n//Ejemplo 1\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n/*\r\nEsto hará que se cree la base de datos niveles.json dentro de la carpeta mega_databases\r\n\r\nEstructura:\r\n\r\n[–] node_modules\r\n[+] mega_databases\r\n    - niveles.json\r\n\r\n*/\r\n\r\n//Ejemplo 2\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB('guild_1', 'economia_db');\r\n/*\r\nEsto hará que se cree un sub directorio llamado \"economia_db\" dentro de la carpeta mega_databases, y dentro de este sub directorio se creará la base de datos guild_1.json\r\n\r\nEstructura:\r\n\r\n[–] node_modules\r\n[+] mega_databases\r\n    [+] economia_db\r\n        - guild_1.json\r\n    - niveles.json\r\n*/\r\n```\r\n\r\n_Modo #2_\r\n\r\nEste modo te permite hacer lo mismo que el modo #1, la unica diferencia es que ahora puedes especificar el nombre de la carpeta donde se almacenaran tus bases de datos y tambien añadir la opcion de que tu base de datos no se llegue a reescribir rapidamente.\r\n\r\nEn este modo solo se puede hacer uso de un parametro la cual debe de contener un objeto con 3 propiedades:\r\n\r\n\r\n1. **nombre**: Nombre del archivo con el que se creara la base de datos, si el nombre de la base de datos que pusiste ya existia, lo que hara es devolver los datos existentes de esa db, este parametro es obligatorio.\r\n2. **carpeta** (opcional): Aqui deberas de colocar el nombre de la carpeta donde se guardaran tus bases de datos, si no colocas esta propiedad, por default será **mega_databases**.\r\n3. **sub** (opcional): Esto tambien es opcional, aqui puedes especificar si quieres que la base de datos se guarde en un sub diréctorio dentro de la carpeta que especificaste en la propiedad **carpeta**.\r\n4. **guardar_tiempo** (opcional): Aqui  deberas de colocar el tiempo (en segundos) que se deberá esperar para actualizar los datos en la base de datos, debe ser mayor a 4 segundos (usalo con precaucion).\r\n\r\n__Ejemplo__\r\n\r\n```js\r\n\r\n//Ejemplo 1\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB({\r\n  nombre: \"levels\",\r\n  carpeta: \"datos_niveles\"\r\n});\r\n/*\r\nEsto hará que se cree la base de datos levels.json dentro de la carpeta datos_niveles\r\n\r\nEstructura:\r\n\r\n[–] node_modules\r\n[+] datos_niveles\r\n    - levels.json\r\n\r\n*/\r\n\r\n\r\n//Ejemplo 2\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB({\r\n  nombre: 'usuarios',\r\n  carpeta: \"economia_db\",\r\n  sub: \"dinero\",\r\n  guardar_tiempo: 5\r\n});\r\n/*\r\nEsto hará que se cree un sub directorio llamado \"dinero\" dentro de la carpeta economia_db, y dentro de este sub directorio se creará la base de datos usuarios.json\r\n\r\nEstructura:\r\n\r\n[–] node_modules\r\n[+] datos_niveles\r\n    - levels.json\r\n[+] economia_db\r\n    [+] dinero\r\n        - usuarios.json\r\n*/\r\n```\r\n\r\n__Recuerda__\r\n\r\nCada base de datos tiene un indentificador interno, esto hará que se puedan diferenciar en caso de que uses una db con el mismo nombre en diferentes carpetas (ya sean sub directorios o la carpeta principal donde se guardan tus bases de datos).\r\n\r\nTen en cuenta que si usas el **Modo #2** y quieres usar los datos de esa db en otro archivo, debes de colocar los mismos datos especificando el **nombre**, **carpeta**, **sub** y **guardar_tiempo** (en caso de hayas usado estas propiedades)\r\n\r\nSi tu base de datos se modifica muchas veces en pequeños lapsos de tiempo (supongamos cada 1 segundo) se recomienda usar la propiedad **guardar_tiempo** del **Modo #2**, esto hará que tu base de datos(archivo) no se llegue a reescribir/actualizar rapidamente, obtenemos una mejor fluidez al momento de guardar los datos. \r\n\r\n\r\n<a name=\"memoDB\" />\r\n### memoDB\r\n\r\nEl constructor memoDB te permitira crear una base de datos en memoria de forma eficiente.\r\nQue quiere decir base de datos en memoria?\r\nPracticamente los datos que agregues no se guardaran en un archivo ya que se mantendran en la memoria interna de este package, recuerda que los datos que agregues se perderan cada vez que tu proyecto/app se apague o reinicie.\r\nEsto es perfecto para hacer cosas rapidas.\r\n\r\n\r\n```js\r\nmemoDB(nombre_db)\r\n```\r\n\r\n__Argumentos__\r\n\r\n1. nombre_db: Nombre de la base de datos, en caso de que quieras obtener los datos de esta db en otro archivo, solo debes de colocar el mismo nombre.\r\n\r\n__Recuerda__\r\n\r\nNo habrá ningun problema si colocas el nombre de una base de datos que esta siendo usada en el constructor crearDB, ambas dbs guardaran datos por separado.\r\n\r\n__Importante__\r\n\r\nEste constructor puede usar unicamente los siguientes metodos:\r\n\r\n- establecer\r\n- obtener\r\n- tiene\r\n- eliminar\r\n- purgeall\r\n- sumar\r\n- restar\r\n- push\r\n- extract\r\n- datos\r\n- ordenar\r\n- random\r\n- keys\r\n- values\r\n- size\r\n- find\r\n- filter\r\n- map\r\n- some\r\n- setIndex\r\n- delIndex\r\n- findKey\r\n- partition\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//Ejemplo 1\r\nconst db = require('megadb');\r\nlet puntajes = new db.memoDB('niveles');\r\n/*\r\nEsto hará que se cree la base de datos niveles en la memoria interna\r\n*/\r\n```\r\n\r\n\r\n<a name=\"establecer\" />\r\n### establecer\r\n\r\n```js\r\nestablecer(clave, valor, clave_split)\r\n\r\n//[alias]\r\nset(clave, valor, clave_split)\r\n```\r\n\r\nEste metodo te permite crear propiedades mediante una clave, tambien te permite actualizar datos existentes por nuevos.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad que quieres crear, puedes usar el . seguido de otro nombre para crear o para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. valor: Aqui deberas de poner el valor que recibira la propiedad que especificaste en el argumento clave.\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para crear o para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con los datos actualizados\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.establecer('MegaStar', {xp: 0, nivel: 10}) // retorna una promesa: {MegaStar: {xp: 0, nivel: 10}}\r\nniveles.establecer('MegaStar.xp', 100) // retorna una promesa: {MegaStar: {xp: 100, nivel: 10}}\r\nniveles.establecer('MoDeR', 100) // retorna una promesa: {MegaStar: {xp: 100, nivel: 10}, MoDeR: 100}\r\nniveles.establecer('MoDeR-datos-monedas', 200, \"-\") // retorna una promesa: {MegaStar: {xp: 100, nivel: 10}, MoDeR: {datos: {monedas: 200}}}\r\nniveles.establecer('MoDeR.datos.banco', 1000) // retorna una promesa:{MegaStar: {xp: 100, nivel: 10}, MoDeR: {datos: {monedas: 200, banco: 1000}}}\r\nniveles.establecer('RatSageM', []) // retorna una promesa: {MegaStar: {xp: 100, nivel: 10}, MoDeR: {datos: {monedas: 200, banco: 1000}}, RatSageM: []}\r\n\r\n//Estructura de la base de datos niveles.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"xp\": 100,\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 200,\r\n      \"banco\": 1000\r\n    }\r\n  },\r\n  \"RatSageM\": []\r\n}\r\n\r\n```\r\n\r\n\r\n<a name=\"size\" />\r\n### size\r\n\r\n```js\r\nsize()\r\n```\r\n\r\nEste metodo te permite obtener el numero de valores(claves/keys) de una base de datos.\r\n\r\n__Argumentos__\r\n\r\nNinguno\r\n\r\n__Retorna__\r\n\r\nRetorna el numero de valores de la base de datos(claves/keys).\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nlet length = niveles.size()\r\nconsole.log(length) //Esto retorna 3 ya que solo hemos agregado 3 valores(claves): MegaStar, MoDeR y RatSageM\r\n```\r\n\r\n\r\n<a name=\"obtener\" />\r\n### obtener\r\n\r\n```js\r\nobtener(clave, clave_split)\r\n\r\n//[alias]\r\nget(clave, clave_split)\r\n```\r\n\r\nEste metodo te permite obtener los datos(valores) de una propiedad especifica.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad que quieres obtener, puedes usar el . seguido de otro nombre para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidada en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con los datos que se obtuvo, de lo contrario **undefined**.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.obtener('MegaStar') // retorna promesa: {xp: 100, nivel: 10}\r\nniveles.obtener('MegaStar.nivel') // retorna promesa: 10\r\nniveles.obtener('MoDeR-datos-banco', \"-\") // retorna promesa: 1000\r\nniveles.obtener('Star') //retorna promesa: undefined\r\n```\r\n\r\n\r\n<a name=\"tiene\" />\r\n### tiene\r\n\r\n```js\r\ntiene(clave, clave_split)\r\n\r\n//[alias]\r\nhas(clave, clave_split)\r\n```\r\n\r\nEste metodo te permite verificar si existe una propiedad especifica.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad que quieres verificar, puedes usar el . seguido de otro nombre para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidada en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\n1. true si la propiedad existe.\r\n2. false si la propiedad no existe.\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.tiene('MegaStar') // retorna true\r\nniveles.tiene('Mario') // retorna false\r\nniveles.tiene('MegaStar.monedas') // retorna false\r\nniveles.tiene('MoDeR-datos-monedas', \"-\") // retorna true\r\n```\r\n\r\n\r\n<a name=\"eliminar\" />\r\n### eliminar\r\n\r\n```js\r\neliminar(clave, clave_split)\r\n\r\n//[alias]\r\ndelete(clave, clave_split)\r\n```\r\n\r\nEste metodo te permite eliminar una propiedad especifica.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad que quieres eliminar, puedes usar el . seguido de otro nombre para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidada en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\n1. true si la propiedad se elimino correctamente.\r\n2. false si la propiedad no se elimino (no existe).\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.eliminar('MegaStar.xp') //retorna true\r\nniveles.eliminar('MoDeR.datos.banco') //retorna true\r\nniveles.eliminar('Mario') //retorna false\r\n\r\n\r\nniveles.tiene('MoDeR.datos.banco') // retorna false porque lo eliminamos\r\nniveles.tiene('MegaStar.xp') // retorna false porque lo eliminamos\r\n\r\nniveles.obtener('MegaStar') // retorna promesa: {nivel: 10}\r\nniveles.obtener('MoDeR-datos', \"-\") // retorna promesa: {monedas: 200}\r\n\r\n\r\n//Estructura actual de la base de datos niveles.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 200\r\n    }\r\n  },\r\n  \"RatSageM\": []\r\n}\r\n\r\n```\r\n\r\n\r\n<a name=\"datos\" />\r\n### datos\r\n\r\n```js\r\ndatos()\r\n```\r\n\r\nEste metodo regresa todas las propiedades de la base de datos, en otras palabras todos los datos.\r\n\r\n__Argumentos__\r\n\r\nNinguno\r\n\r\n__Retorna__\r\n\r\nPromesa con todos los datos.\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.datos().then(n => {\r\n  console.log(n)\r\n})\r\n\r\n//console.log(n)\r\n{\r\n  \"MegaStar\": {\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 100\r\n    }\r\n  },\r\n  \"RatSageM\": []\r\n}\r\n```\r\n\r\n<a name=\"push\" />\r\n### push\r\n\r\n```js\r\npush(clave, valor, clave_split)\r\n```\r\n\r\nEste metodo te permite agregar un elemento a un array.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad a la que quieres agregar el elemento, puedes usar el . seguido de otro nombre para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. valor: Aqui deberas de poner el elemento que se agregara en el array que especificaste en el argumento clave.\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con el array actualizado.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.push('RatSageM', 'manzana') // retorna promesa: [\"manzana\"]\r\nniveles.establecer('MGstar', {items: [\"platano\"]})\r\n//retorna promesa: {MegaStar: {nivel: 10}, MoDeR: {datos: {monedas: 100}}, RatSageM: [\"manzana\"], Mgstar: {items: [\"platano\"]}}\r\n\r\nniveles.push('MGstar', 'sandia') // retorna Error (.catch)\r\nniveles.push('MGstar.items', 'sandia') // retorna promesa: [\"platano\", \"sandia\"]\r\n\r\n\r\n//Estructura actual de la base de datos niveles.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 200\r\n    }\r\n  },\r\n  \"RatSageM\": [\"manzana\"],\r\n  \"MGstar\": {\r\n    \"items\": [\"platano\", \"sandia\"]\r\n  }\r\n}\r\n```\r\n\r\n\r\n<a name=\"extract\" />\r\n### extract\r\n\r\n```js\r\nextract(clave, valor, clave_split)\r\n```\r\n\r\nEste metodo te permite remover un elemento especifico de un array.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad a la que quieres remover el elemento, puedes usar el . seguido de otro nombre para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. valor: Aqui deberas de poner el elemento que se removera del array que especificaste en el argumento clave.\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con el array actualizado.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.extract('MGstar', 'platano') // retorna Error (.catch)\r\nniveles.extract('RatSageM', 'manzana') // retorna promesa: []\r\nniveles.extract('MGstar.items', 'platano') // retorna promesa: [\"sandia\"]\r\nniveles.extract('MGstar.items', 'durazno') // retorna Error (.catch)\r\n\r\n\r\n//Estructura actual de la base de datos niveles.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 200\r\n    }\r\n  },\r\n  \"RatSageM\": [],\r\n  \"MGstar\": {\r\n    \"items\": [\"sandia\"]\r\n  }\r\n}\r\n```\r\n\r\n\r\n<a name=\"sumar\" />\r\n### sumar\r\n\r\n```js\r\nsumar(clave, valor, clave_split)\r\n\r\n//[alias]\r\nadd(clave, valor, clave_split)\r\n```\r\n\r\nEste metodo te permite sumar una cantidad especifica a una propiedad, el valor propiedad debe ser un numero.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad a la que quieres sumarle una cantidad especifica, puedes usar el . seguido de otro nombre para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. valor: Aqui deberas de poner la cantidad que se le sumara a la propiedad que especificaste en el argumento clave, esto debe ser un numero.\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con el valor actualizado.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.establecer('Nelson', 20)\r\n//retorna promesa: {MegaStar: {nivel: 10}, MoDeR: {datos: {monedas: 200}}, RatSageM: [], MGstar: {items: [\"sandia\"]}, Nelson: 20}\r\n\r\nniveles.sumar('Nelson', 25) //retorna promesa: 45\r\nniveles.establecer('Sun.datos.monedas', 10)\r\n//retorna promesa: {MegaStar: {nivel: 10}, MoDeR: {datos: {monedas: 200}}, RatSageM: [], MGstar: {items: [\"sandia\"]}, Nelson: 20, Sun: {datos: {monedas: 10}}}\r\n\r\nniveles.sumar('Sun.datos', 90) // retorna Error (.catch)\r\nniveles.sumar('Sun-datos-monedas', 90, \"-\") // retorna promesa: 100\r\n\r\nconsole.log(niveles.size()) //Esto imprime 6 ya que hemos agregado 6 valores(claves): MegaStar, MoDeR, RatSageM, MGstar, Nelson y Sun\r\n\r\n//Estructura actual de la base de datos niveles.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 200\r\n    }\r\n  },\r\n  \"RatSageM\": [],\r\n  \"MGstar\": {\r\n    \"items\": [\"sandia\"]\r\n  },\r\n  \"Nelson\": 45,\r\n  \"Sun\": {\r\n    \"datos\": {\r\n      \"monedas\": 100\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n<a name=\"restar\" />\r\n### restar\r\n\r\n```js\r\nrestar(clave, valor, clave_split)\r\n\r\n//[alias]\r\nsubtract(clave, valor, clave_split)\r\n```\r\n\r\nEste metodo te permite restar una cantidad especifica a una propiedad, el valor propiedad debe ser un numero.\r\n\r\n__Argumentos__\r\n\r\n1. clave: Aqui deberas de poner el nombre de la propiedad a la que quieres restarle una cantidad especifica, puedes usar el . seguido de otro nombre para acceder a propiedades anidadas (el . es un signo por default, puedes cambiarlo en clave_split)\r\n2. valor: Aqui deberas de poner la cantidad que se le restara a la propiedad que especificaste en el argumento clave, esto debe ser un numero.\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con el valor actualizado.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.restar('Nelson', 40) //retorna promesa: 5\r\nniveles.restar('Sun.datos', 100) // retorna Error (.catch)\r\nniveles.restar('Sun-datos-monedas', 100, \"-\") // retorna promesa: 0\r\n\r\n\r\n//Estructura actual de la base de datos niveles.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 200\r\n    }\r\n  },\r\n  \"RatSageM\": [],\r\n  \"MGstar\": {\r\n    \"items\": [\"sandia\"]\r\n  },\r\n  \"Nelson\": 5,\r\n  \"Sun\": {\r\n    \"datos\": {\r\n      \"monedas\": 0\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n<a name=\"keys\" />\r\n### keys\r\n\r\n```js\r\nkeys(clave, clave_split)\r\n```\r\n\r\nEste metodo retorna un array con todos los nombres(keys) de las propiedades del objeto que especificaste.\r\n\r\n__Argumentos__\r\n\r\n1. clave (opcional): La clave es opcional, en el caso de que quieras obtener los nombres(keys) de un objeto especifico, puedes colocar el nombre del objeto. Si quieres obtener los nombres(keys) de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nEn el caso de que directamente quieras obtener los nombres(keys) de una base de datos, no pongas ningun valor.\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con un array que contiene los nombres de las propiedades(keys).\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.keys() //retorna promesa: [\"MegaStar\", \"MoDeR\", \"RatSageM\", \"MGstar\", \"Nelson\", \"Sun\"]\r\nniveles.keys('MegaStar.nivel') // retorna Error (.catch)\r\nniveles.keys('Sun.datos') ///retorna promesa: [\"monedas\"]\r\n```\r\n\r\n\r\n<a name=\"values\" />\r\n### values\r\n\r\n```js\r\nvalues(clave, clave_split)\r\n```\r\n\r\nEste metodo retorna un array con todos los valores de las propiedades del objeto que especificaste.\r\n\r\n__Argumentos__\r\n\r\n1. clave (opcional): La clave es opcional, en el caso de que quieras obtener los valores de un objeto especifico, puedes colocar el nombre del objeto. Si quieres obtener los valores de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nEn el caso de que directamente quieras obtener los valores de una base de datos, no pongas ningun valor.\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con un array que contiene los valores de las propiedades.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\nniveles.values() //retorna promesa: [{nivel: 10}, {datos: {monedas: 200}}, [], {items: [\"sandia\"]}, {datos: {monedas:0}}]\r\n\r\nniveles.values('MegaStar.nivel') // retorna Error (.catch)\r\nniveles.values('Sun.datos') ///retorna promesa: [{monedas: 0}]\r\n```\r\n\r\n\r\n<a name=\"purgeall\" />\r\n### purgeall\r\n\r\n```js\r\npurgeall()\r\n```\r\n\r\nEste metodo te permite eliminar todos los datos de una base de datos especifica.\r\n\r\n__Argumentos__\r\n\r\nNinguno\r\n\r\n__Retorna__\r\n\r\n1. true si se elimino todo correctamente.\r\n2. false si no se elimino correctamente.\r\n\r\n__Ejemplos__\r\n\r\n```js\r\nconst db = require('megadb');\r\nlet niveles = new db.crearDB('niveles');\r\n\r\n//Estructura actual de la base de datos niveles.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"nivel\": 10\r\n  },\r\n  \"MoDeR\": {\r\n    \"datos\": {\r\n      \"monedas\": 200\r\n    }\r\n  },\r\n  \"RatSageM\": [],\r\n  \"MGstar\": {\r\n    \"items\": [\"sandia\"]\r\n  },\r\n  \"Nelson\": 5,\r\n  \"Sun\": {\r\n    \"datos\": {\r\n      \"monedas\": 0\r\n    }\r\n  }\r\n}\r\n\r\n\r\nlet status = niveles.purgeall()\r\nconsole.log(status) //Esto retorna true\r\n\r\n//Estructura actual de la base de datos niveles.json:\r\n{} //No contiene nada ya que se elimino todo\r\n```\r\n\r\n\r\n<a name=\"ordenar\" />\r\n### ordenar\r\n\r\n```js\r\nordenar(clave, valor, clave_split)\r\n\r\n//[alias]\r\nsort(clave, valor, clave_split)\r\n```\r\n\r\nEste metodo te permite ordenar las propiedad de un objeto de forma descendente, ten en cuenta que el valor de las propiedades que quieras ordenar debe ser un numero.\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras ordenar las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres ordenar las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras ordenar las propiedades de una base de datos.\r\n\r\n2. valor: El valor tambien puede recibir dos tipos de valores, en el caso de que las propiedades del objeto que quieres ordenar tambien sean objetos y mantengan propiedades, puedes colocar el nombre de la propiedad que se usara como referencia para ordenarlos de forma descendente, en el caso de que estas propiedades tambien sean objetos, puedes usar el . seguido del nombre del objeto y la propiedad que quieres ordenar (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que el valor de la propiedad con la cual lo vas a ordenar no sea un objeto.\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave y el argumento valor (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con un array, este array contiene las propiedades ordenadas de forma descendente.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n//ejemplo_1\r\n\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB('guild_1', 'economia_db');\r\n\r\neconomia.establecer('MegaStar', 100)\r\neconomia.establecer('MoDeR', 40)\r\neconomia.establecer('ratsagem', 320)\r\n\r\n/*\r\nEstructura actual de la base de datos guild_1.json:\r\n\r\n{\r\n  \"MegaStar\": 100,\r\n  \"MoDeR\": 40,\r\n  \"ratsagem\": 320\r\n}\r\n\r\n*/\r\n\r\neconomia.ordenar(false, false)\r\n//retorna promesa: [{clave: 'ratsagem', valor: 320}, {clave: 'MegaStar', valor: 100}, {clave: 'MoDeR', valor: 40}]\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB('guild_1', 'economia_db');\r\neconomia.establecer('MegaStar', {monedas: 100})\r\neconomia.establecer('MoDeR', {monedas: 40})\r\neconomia.establecer('ratsagem', {monedas: 320})\r\n\r\n/*\r\nEstructura actual de la base de datos guild_1.json:\r\n\r\n{\r\n  \"MegaStar\": {\r\n    \"monedas\": 100\r\n  },\r\n  \"MoDeR\": {\r\n    \"monedas\": 40\r\n  },\r\n  \"ratsagem\": {\r\n    \"monedas\": 320\r\n  }\r\n}\r\n\r\n*/\r\n\r\neconomia.ordenar(false, \"monedas\")\r\n//retorna promesa: [{clave: 'ratsagem', valor: {monedas: 320)}, {clave: 'MegaStar', valor: {monedas: 100}}, {clave: 'MoDeR', valor: {monedas: 40)}]\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_3\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB('guild_2', 'economia_db');\r\nlet usuarios_data = {\r\n  'MegaStar': 100,\r\n  'MoDeR': 40,\r\n  'ratsagem': 320\r\n}\r\neconomia.establecer('usuarios', usuarios_data)\r\n\r\n/*\r\nEstructura actual de la base de datos guild_2.json:\r\n\r\n{\r\n  \"usuarios\": {\r\n    \"MegaStar\": 100\r\n    \"MoDeR\": 40\r\n    \"ratsagem\": 320\r\n  }\r\n}\r\n\r\n*/\r\n\r\neconomia.ordenar(\"usuarios\", false)\r\n//retorna promesa: [{clave: 'ratsagem', valor: 320}, {clave: 'MegaStar', valor: 100}, {clave: 'MoDeR', valor: 40}]\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_4\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB('guild_3', 'economia_db');\r\nlet usuarios_data = {\r\n  \"MegaStar\": {monedas: 50},\r\n  \"MoDeR\": {monedas: 67},\r\n  \"ratsagem\": {monedas: 4}\r\n}\r\neconomia.establecer('usuarios', usuarios_data)\r\n\r\n\r\n/*\r\nEstructura actual de la base de datos guild_3.json:\r\n\r\n{\r\n  \"usuarios\": {\r\n    \"MegaStar\": {\r\n      \"monedas\": 50\r\n    },\r\n    \"MoDeR\": {\r\n      \"monedas\": 67\r\n    },\r\n    \"ratsagem\": {\r\n      \"monedas\": 4\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\neconomia.ordenar(\"usuarios\", \"monedas\")\r\n//retorna promesa: [{clave: 'MoDeR', valor: {monedas: 67)}, {clave: 'MegaStar', valor: {monedas: 50}}, {clave: 'ratsagem', valor: {monedas: 4)}]\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_5\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB('guild_4', 'economia_db');\r\n\r\nlet usuarios = {\r\n  \"megastar\": {monedas: 10, medallas: 15},\r\n  \"moder\": {monedas: 50, medallas: 20},\r\n  \"ratsagem\": {monedas: 25, medallas: 5}\r\n}\r\neconomia.establecer('servidores.datos', usuarios)\r\n\r\n/*\r\nEstructura actual de la base de datos guild_4.json:\r\n\r\n{\r\n 'servidores': {\r\n    'datos': {\r\n      'megastar': {\r\n        'monedas': 10,\r\n        'medallas': 15\r\n      },\r\n      'moder': {\r\n        'monedas': 50,\r\n        'medallas': 20\r\n      },\r\n      'ratsagem': {\r\n        'monedas': 25,\r\n        'medallas': 5\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\neconomia.ordenar('servidores.datos', \"medallas\")\r\n\r\n/*\r\nretorna promesa:\r\n\r\n[\r\n  {clave: 'moder', valor: {monedas: 50, medallas: 20}},\r\n  {clave: 'MegaStar', valor: {monedas: 10, medallas: 15}},\r\n  {clave: 'ratsagem', valor: {monedas: 25, medallas: 5}}\r\n]\r\n\r\n*/\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_6\r\nconst db = require('megadb');\r\nlet economia = new db.crearDB('guild_5', 'economia_db');\r\n\r\nlet usuarios = {\r\n  \"megastar\": {stats: {monedas: 10}},\r\n  \"moder\": {stats: {monedas: 50}},\r\n  \"ratsagem\": {stats: {monedas: 25}}\r\n}\r\neconomia.establecer('servidores.datos', usuarios)\r\n\r\n/*\r\nEstructura actual de la base de datos guild_5.json:\r\n\r\n{\r\n 'servidores': {\r\n    'datos': {\r\n      'megastar': {\r\n        'stats': {\r\n          'monedas': 10\r\n        }\r\n      },\r\n      'moder': {\r\n        'stats': {\r\n          'monedas': 50\r\n        }\r\n      },\r\n      'ratsagem': {\r\n        'stats': {\r\n          'monedas': 25\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\neconomia.ordenar('servidores-datos', \"stats-monedas\", \"-\") //Estoy usando el - como separador en lugar del .\r\n\r\n/*\r\nretorna promesa:\r\n\r\n[\r\n  {clave: 'moder', valor: {stats: {monedas: 50}}},\r\n  {clave: 'ratsagem', valor: {stats: {monedas: 25}}},\r\n  {clave: 'megastar', valor: {stats: {monedas: 10}}}\r\n]\r\n\r\n*/\r\n```\r\n\r\n\r\n<a name=\"random\" />\r\n### random\r\n\r\n```js\r\nrandom(clave, cantidad, clave_split)\r\n```\r\n\r\nEste metodo te permite obtener una cantidad especifica de propiedades aleatoriamente (random), nunca se repetiran.\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras obtener aleatoriamente una cantidad especifica de propiedades de un objeto, puedes colocar el nombre del objeto. Si quieres obtener aleatoriamente una cantidad especifica de propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que tengas propiedades que no sean objetos anidados.\r\n\r\n2. cantidad: Aqui deberas de poner la cantidad(un numero) de propiedades random que se obtendra del objeto que especificaste en el argumento clave.\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con un array, este array contiene las propiedades que fueron seleccionadas aleatoriamente.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n//ejemplo_1\r\nconst db = require('megadb');\r\nlet giveaway = new db.crearDB('giveaway');\r\n\r\ngiveaway.establecer('MegaStar', {ganadas: 0})\r\ngiveaway.establecer('MoDeR', {ganadas: 0})\r\ngiveaway.establecer('ratsagem', {ganadas: 0})\r\ngiveaway.establecer('Sun', {ganadas: 0})\r\ngiveaway.establecer('MGstar', {ganadas: 0})\r\ngiveaway.establecer('ruru', {ganadas: 0})\r\n\r\n//Estructura actual de la base de datos giveaway.json:\r\n{\r\n  \"MegaStar\": {\r\n    \"ganadas\": 0\r\n  },\r\n  \"MoDeR\": {\r\n    \"ganadas\": 0\r\n  },\r\n  \"ratsagem\": {\r\n    \"ganadas\": 0\r\n  },\r\n  \"pedro\": {\r\n    \"ganadas\": 0\r\n  },\r\n  \"MGstar\": {\r\n    \"ganadas\": 0\r\n  },\r\n  \"ruru\":  {\r\n    \"ganadas\": 0\r\n  }\r\n}\r\n\r\ngiveaway.random(false, 4)\r\n//retorna una promesa (las propiedades son aleatorias, esto es solo un ejemplo):\r\n/*\r\n\r\n[\r\n  {clave: MegaStar, valor: {ganadas: 0}},\r\n  {clave: ruru, valor: {ganadas: 0}},\r\n  {clave: pedro, valor: {ganadas: 0}},\r\n  {clave: MoDeR, valor: {ganadas: 0}}\r\n]\r\n\r\n*/\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\nconst db = require('megadb');\r\nlet giveaway = new db.crearDB('giveaway1');\r\nlet usuarios = {\r\n  \"12132131231242343\": {ganadas: 0},\r\n  \"12132454545454543\": {ganadas: 2},\r\n  \"13243242342342343\": {ganadas: 1},\r\n  \"12138786867868683\": {ganadas: 6},\r\n  \"18989896797978973\": {ganadas: 0},\r\n  \"12121212135345346\":  {ganadas: 5}\r\n}\r\ngiveaway.establecer('users_ID', usuarios)\r\n\r\n\r\n//Estructura actual de la base de datos giveaway1.json:\r\n{\r\n  \"users_ID\": {\r\n    \"12132131231242343\": {\r\n      \"ganadas\": 0\r\n    },\r\n    \"12132454545454543\": {\r\n      \"ganadas\": 2\r\n    },\r\n    \"13243242342342343\": {\r\n      \"ganadas\": 1\r\n    },\r\n    \"12138786867868683\": {\r\n      \"ganadas\": 6\r\n    },\r\n    \"18989896797978973\": {\r\n      \"ganadas\": 0\r\n    },\r\n    \"12121212135345346\":  {\r\n      \"ganadas\": 5\r\n    }\r\n  }\r\n}\r\n\r\ngiveaway.random(\"users_ID\", 3)\r\n//retorna una promesa (las propiedades son aleatorias, esto es solo un ejemplo):\r\n/*\r\n\r\n[\r\n  {clave: 13243242342342343, valor: {ganadas: 1}},\r\n  {clave: 12138786867868683, valor: {ganadas: 6}},\r\n  {clave: 12121212135345346, valor: {ganadas: 5}}\r\n]\r\n\r\n*/\r\n```\r\n\r\n<a name=\"existeDB\" />\r\n### existeDB\r\n\r\n```js\r\nexisteDB(nombre_db)\r\n```\r\n\r\nEste metodo te permite verificar si existe una especifica base de datos en la carpeta mega_databases o en sub directorio.\r\n\r\n__Argumentos__\r\n\r\n1. nombre_db: Aqui debe de ir el nombre de la base de datos que quires verificar si existe, si usaste la opcion del sub directorio en el constructor crearDB, esto automaticamente buscara en el sub directorio, de lo contrario se buscara en la carpeta mega_databases si no usaste esta opcion.\r\n\r\n__Retorna__\r\n\r\n1. true si la base de datos existe.\r\n2. false si la base de datos no existe.\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n/*\r\nNuestra estructura de dbs deberia ser esta:\r\n\r\n[–] node_modules\r\n[+] mega_databases\r\n    [+] economia_db\r\n        - guild_1.json\r\n        - guild_2.json\r\n        - guild_3.json\r\n        - guild_4.json\r\n        - guild_5.json\r\n    - niveles.json\r\n    - giveaway.json\r\n    - giveaway1.json\r\n*/\r\n\r\n//ejemplo_1 usare un sub directorio\r\nconst db = require(\"megadb\");\r\nlet economia = new db.crearDB(\"guild_1\", \"economia_db\") //Estoy obteniendo el archivo guild_1.json que esta dentro del sub directorio \"economia_db\"\r\nconsole.log(economia.existeDB(\"guild_2\")) //retorna true\r\nconsole.log(economia.existeDB(\"guild_5\")) //retorna true\r\nconsole.log(economia.existeDB(\"guild_8\")) //retorna false\r\nconsole.log(economia.existeDB(\"niveles\")) //retorna false\r\n\r\n\r\n//ejemplo_2 sin usar sub directorio\r\nconst db = require(\"megadb\");\r\nlet niveles = new db.crearDB(\"niveles\") //Estoy obteniendo el archivo niveles.json que esta dentro de la carpeta mega_databases\r\nconsole.log(niveles.existeDB(\"giveaway\")) //retorna true\r\nconsole.log(niveles.existeDB(\"giveaway1\")) //retorna true\r\nconsole.log(niveles.existeDB(\"guild_8\")) //retorna false\r\nconsole.log(niveles.existeDB(\"mydb\")) //retorna false\r\n```\r\n\r\n\r\n<a name=\"find\" />\r\n### find\r\n\r\n```js\r\nfind(clave, callback(), clave_split)\r\n```\r\n\r\nEste metodo retorna el valor de la primera propiedad que cumpla la condicion del callback, si no encuentra nada regresara **undefined**.\r\nEs similar al **Array.find**\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. callback(valor_actual, clave_actual) : Aqui deberas de poner la funcion que se ejecutara o evaluara sobre cada elemento iterado del objeto que especificaste en el argumento clave, el callback puede recibir 2 argumentos:\r\n\r\n```\r\nvalor_actual (opcional): Aqui se mostrara el valor del elemento que se esta procesando en ese momento.\r\nclave_actual (opcional): Aqui se mostrara la clave del elemento que se esta procesando en ese momento.\r\n```\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nEsto retornara una promesa con el valor de la primera propiedad que cumpla la condicion del callback, de lo contrario retornara **undefined**.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//ejemplo_1\r\nconst db = require(\"megadb\");\r\nlet escuela = new db.crearDB(\"escuela\")\r\n\r\nescuela.establecer('Mario', {edad: 15, apellido: \"garcia\"})\r\nescuela.establecer('Pedro', {edad: 12, apellido: \"rojas\"})\r\nescuela.establecer('Juan', {edad: 10, apellido: \"perez\"})\r\nescuela.establecer('Jair', {edad: 16, apellido: \"gonzales\"})\r\n\r\n/* Estructura actual de la base de datos escuela.json:\r\n\r\n{\r\n  \"Mario\": {\r\n    \"edad: 15,\r\n    \"apellido: \"garcia\"\r\n  },\r\n  \"Pedro\": {\r\n    \"edad: 12,\r\n    \"apellido: \"rojas\"\r\n  },\r\n  \"Juan\": {\r\n    \"edad: 10,\r\n    \"apellido: \"perez\"\r\n  },\r\n  \"Jair\": {\r\n    \"edad: 16,\r\n    \"apellido: \"gonzales\"\r\n  }\r\n}\r\n\r\n*/\r\n\r\nescuela.find(false, (v) => v.edad == 16).then(nuevos => { //v es el elemento que se esta procesando en ese momento\r\n\r\n  /* Ahora nuevos debera de contener esto:\r\n    {\r\n      \"edad\": \"16\",\r\n      \"apellido\": \"gonzales\"\r\n    }\r\n  */\r\n\r\n  if(nuevos == undefined) return console.log(\"Ningun alumno tiene 16 años\")\r\n  return console.log(`El alumno ${nuevos.apellido} tiene ${nuevos.edad} años!`)\r\n}).catch(error => console.log(error))\r\n\r\n//Esto da como resultado: \"El alumno gonzales tiene 16 años!\"\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\nconst db = require(\"megadb\");\r\nlet registros = new db.crearDB(\"registros\")\r\n\r\nlet registrados = {\r\n  \"ID_1\": {\r\n    \"username\": \"MegaStar\",\r\n    \"password\": \"xxxxxxxx\",\r\n    \"age\": 20\r\n  },\r\n  \"ID_2\": {\r\n    \"username\": \"MoDeR\",\r\n    \"password\": \"aaaaaaaa\",\r\n    \"age\": 19\r\n  },\r\n  \"ID_3\": {\r\n    \"username\": \"RatSageM\",\r\n    \"password\": \"cccccccc\",\r\n    \"age\": 18\r\n  }\r\n}\r\n\r\nregistros.establecer('usuarios', registrados)\r\n\r\n/* Estructura actual de la base de datos registros.json:\r\n\r\n{\r\n  \"usuarios\": {\r\n    \"ID_1\": {\r\n      \"username\": \"MegaStar\",\r\n      \"password\": \"xxxxxxxx\",\r\n      \"edad\": 20\r\n    },\r\n    \"ID_2\": {\r\n      \"username\": \"MoDeR\",\r\n      \"password\": \"aaaaaaaa\",\r\n      \"edad\": 19\r\n    },\r\n    \"ID_3\": {\r\n      \"username\": \"RatSageM\",\r\n      \"password\": \"cccccccc\",\r\n      \"edad\": 18\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\nregistros.find(\"usuarios\", (v) => v.username == \"MegaStar\").then(usuario => { //v es el elemento del objeto \"usuarios\" que se esta procesando en ese momento\r\n\r\n  /* Ahora usuario debera de contener esto:\r\n    {\r\n      \"username\": \"MegaStar\",\r\n      \"password\": \"xxxxxxxx\",\r\n      \"edad\": 20\r\n    }\r\n  */\r\n\r\n  if(usuario == undefined) return console.log(\"No existe este usuario.\")\r\n  let nombre = usuario.username\r\n  let contra = usuario.password\r\n  let edad = usuario.edad\r\n  return console.log(`Datos, username: ${nombre}, contraseña: ${contra}, edad: ${edad}`)\r\n}).catch(error => console.log(error))\r\n\r\n//Esto da como resultado: \"Datos, username: MegaStar, contraseña: xxxxxxxx, edad: 20\"\r\n```\r\n\r\n\r\n<a name=\"filter\" />\r\n### filter\r\n\r\n```js\r\nfilter(clave, callback(), clave_split)\r\n```\r\n\r\nEste metodo retorna un objeto con todas las propiedades que cumplan la condicion del callback, si no encuentra nada regresara un objeto vacio **{}**.\r\nEs similar al **Array.filter** solo que en vez de regresar un nuevo array, regresa un nuevo objeto.\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. callback(valor_actual, clave_actual): Aqui deberas de poner la funcion que se ejecutara o evaluara sobre cada elemento iterado del objeto que especificaste en el argumento clave, el callback puede recibir 2 argumentos:\r\n\r\n```\r\nvalor_actual (opcional): Aqui se mostrara el valor del elemento que se esta procesando en ese momento.\r\nclave_actual (opcional): Aqui se mostrara la clave del elemento que se esta procesando en ese momento.\r\n```\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nEsto retornara una promesa con un objeto que contiene todas las propiedades que cumplan la condicion del callback, de lo contrario retornara un objeto vacio **{}**.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//ejemplo_1\r\nconst db = require(\"megadb\");\r\nlet seleccion = new db.crearDB(\"seleccion\")\r\n\r\nseleccion.establecer('Mario', 18)\r\nseleccion.establecer('Pedro', 20)\r\nseleccion.establecer('Juan', 12)\r\nseleccion.establecer('Jair', 13)\r\nseleccion.establecer('Steve', 16)\r\nseleccion.establecer('Axel', 10)\r\n\r\n/* Estructura actual de la base de datos seleccion.json:\r\n\r\n{\r\n  \"Mario\": 18,\r\n  \"Pedro\": 20,\r\n  \"Juan\": 12,\r\n  \"Jair\": 13,\r\n  \"Steve\": 16,\r\n  \"Axel\": 10\r\n}\r\n\r\n*/\r\n\r\nseleccion.filter(false, (v) => v > 15).then(nuevos => { //Estoy especificando que el valor del elemento que se esta procesando sea mayor a 15\r\n\r\n  /* Ahora nuevos debera de contener este objeto:\r\n    {\r\n      \"Mario\": 18,\r\n      \"Pedro\": 20,\r\n      \"Steve\": 16\r\n    }\r\n  */\r\n\r\n  if(Object.keys(nuevos).length <= 0) return console.log(\"Ningun jugador tiene mas de 15 años\")\r\n  let jugadores = []\r\n  for(var key in nuevos) {\r\n    jugadores.push(`Nombre: ${key}, edad: ${nuevos[key]}`)\r\n  }\r\n  return console.log(jugadores.join(\"\\n\"))\r\n})\r\n\r\n/*Esto da como resultado:\r\n\r\nNombre: Mario, edad: 18\r\nNombre: Pedro, edad: 20\r\nNombre: Steve, edad: 16\r\n\r\n*/\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\nconst db = require(\"megadb\");\r\nlet registros2 = new db.crearDB(\"registros2\")\r\n\r\nlet registrados = {\r\n  \"ID_1\": {\r\n    \"username\": \"MegaStar\",\r\n    \"password\": \"xxxxxxxx\",\r\n    \"lenguaje\": \"javascript\"    \r\n    \"age\": 20\r\n  },\r\n  \"ID_2\": {\r\n    \"username\": \"MoDeR\",\r\n    \"password\": \"aaaaaaaa\",\r\n    \"lenguaje\": \"javascript\"    \r\n    \"age\": 19\r\n  },\r\n  \"ID_3\": {\r\n    \"username\": \"RatSageM\",\r\n    \"password\": \"cccccccc\",\r\n    \"lenguaje\": \"c++\"    \r\n    \"age\": 18\r\n  }\r\n}\r\n\r\nregistros2.establecer('users', registrados)\r\n\r\n/* Estructura actual de la base de datos registros2.json:\r\n\r\n{\r\n  \"users\": {\r\n    \"ID_1\": {\r\n      \"username\": \"MegaStar\",\r\n      \"password\": \"xxxxxxxx\",\r\n      \"lenguaje\": \"javascript\"       \r\n      \"edad\": 20\r\n    },\r\n    \"ID_2\": {\r\n      \"username\": \"MoDeR\",\r\n      \"password\": \"aaaaaaaa\",\r\n      \"lenguaje\": \"javascript\"       \r\n      \"edad\": 19\r\n    },\r\n    \"ID_3\": {\r\n      \"username\": \"RatSageM\",\r\n      \"password\": \"cccccccc\",\r\n      \"lenguaje\": \"c++\"     \r\n      \"edad\": 18\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\nregistros2.filter(\"users\", (v) => v.lenguaje == \"javascript\").then(usuarios => {\r\n\r\n  /* Ahora usuarios debera de contener este objeto:\r\n    {\r\n      \"ID_1\": {\r\n        \"username\": \"MegaStar\",\r\n        \"password\": \"xxxxxxxx\",\r\n        \"lenguaje\": \"javascript\"       \r\n        \"edad\": 20\r\n      },\r\n      \"ID_2\": {\r\n        \"username\": \"MoDeR\",\r\n        \"password\": \"aaaaaaaa\",\r\n        \"lenguaje\": \"javascript\"       \r\n        \"edad\": 19\r\n      }\r\n    }\r\n  */\r\n  if(Object.keys(usuarios).length <= 0) return console.log(\"Ningun usuario sabe javascript.\")\r\n  let lista = []\r\n\r\n  for(var key in usuarios) {\r\n    let nombre = usuarios[key].username\r\n    let edad = usuarios[key].edad\r\n    let lenguaje = usuarios[key].lenguaje\r\n\r\n    lista.push(`[${key}] username: ${nombre}, edad: ${edad}, lenguaje: ${lenguaje}`)\r\n  }\r\n  return console.log(lista.join(\"\\n\"))\r\n})\r\n\r\n/*Esto da como resultado:\r\n\r\n[ID_1] username: MegaStar, edad: 20, lenguaje: javascript\r\n[ID_2] username: MoDeR, edad: 18, lenguaje: javascript\r\n\r\n*/\r\n```\r\n\r\n\r\n<a name=\"map\" />\r\n### map\r\n\r\n```js\r\nmap(clave, callback(), clave_split)\r\n```\r\n\r\nEste metodo retorna un array con los resultados de la condicion que se especifico en el callback.\r\nEs similar al **Array.map**\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. callback(valor_actual, clave_actual): Aqui deberas de poner la funcion que se ejecutara o evaluara sobre cada elemento iterado del objeto que especificaste en el argumento clave, el callback puede recibir 2 argumentos:\r\n\r\n```\r\nvalor_actual (opcional): Aqui se mostrara el valor del elemento que se esta procesando en ese momento.\r\nclave_actual (opcional): Aqui se mostrara la clave del elemento que se esta procesando en ese momento.\r\n```\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nEsto retornara una promesa con un array que contiene todos los resultados que se especificó en el callback.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//ejemplo_1\r\nconst db = require(\"megadb\");\r\nlet puntaje = new db.crearDB(\"puntajes\")\r\n\r\npuntaje.establecer('Mario', 2)\r\npuntaje.establecer('Pedro', 4)\r\npuntaje.establecer('Juan', 5)\r\npuntaje.establecer('Jair', 6)\r\n\r\n/* Estructura actual de la base de datos puntajes.json:\r\n\r\n{\r\n  \"Mario\": 2,\r\n  \"Pedro\": 4,\r\n  \"Juan\": 5,\r\n  \"Jair\": 6\r\n}\r\n\r\n*/\r\n\r\npuntaje.map(false, (v, key) => `Usuario: ${key}, puntaje: ${v*2}`).then(datos => { //v toma el valor del elemento que se esta procesando en ese momento, y key toma la clave del elemento que se esta procesando en ese momento\r\n\r\n  /* Ahora datos debera de contener este array:\r\n\r\n    [\"Usuario: Mario, puntaje: 4\",\r\n     \"Usuario: Pedro, puntaje: 8\",\r\n     \"Usuario: Juan, puntaje: 10\",\r\n     \"Usuario: Jair, puntaje: 12\"]\r\n  */\r\n\r\n  return console.log(datos.join(\"\\n\"))\r\n})\r\n\r\n/*Esto da como resultado:\r\n\r\nUsuario: Mario, puntaje: 4\r\nUsuario: Pedro, puntaje: 8\r\nUsuario: Juan, puntaje: 10\r\nUsuario: Jair, puntaje: 12\r\n\r\n*/\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\nconst db = require(\"megadb\");\r\nlet users_lb = new db.crearDB(\"userslb\")\r\n\r\nlet usuarios = {\r\n  \"servidor_1\": {\r\n    \"MegaStar\": 8,   \r\n    \"MoDeR\": 6,\r\n    \"Mario\": 1,\r\n    \"Pedro\": 8\r\n  },\r\n  \"servidor_2\": {\r\n    \"Juan\": 4,   \r\n    \"RatSageM\": 5,\r\n    \"Steve\": 7\r\n  },\r\n  \"servidor:3\": {\r\n    \"reDoM\": 1,\r\n    \"Jack\": 4\r\n  }\r\n}\r\n\r\nusers_lb.establecer('leaderboard', usuarios)\r\n\r\n/* Estructura actual de la base de datos userslb.json:\r\n\r\n{\r\n  \"leaderboard\": {\r\n    \"servidor_1\": {\r\n      \"MegaStar\": 8,   \r\n      \"MoDeR\": 6,\r\n      \"Mario\": 1,\r\n      \"Pedro\": 8\r\n    },\r\n    \"servidor_2\": {\r\n      \"Juan\": 4,   \r\n      \"RatSageM\": 5,\r\n      \"Steve\": 7\r\n    },\r\n    \"servidor_3\": {\r\n      \"reDoM\": 1,\r\n      \"Jack\": 4\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\nusers_lb.map(\"leaderboard.servidor_1\", (v, key) => `Usuario: ${key} | puntos: ${v*3}`).then(usuarios => {\r\n\r\n  /* Ahora usuarios debera de contener este array:\r\n\r\n  [\"Usuario: MegaStar | puntos: 24\",\r\n   \"Usuario: MoDeR | puntos: 18\",\r\n   \"Usuario: Mario | puntos: 3\",\r\n   \"Usuario: Pedro | puntos: 24\"]\r\n\r\n  */\r\n\r\n  return console.log(usuarios.join(\"\\n\"))\r\n})\r\n\r\n/*Esto da como resultado:\r\n\r\nUsuario: MegaStar | puntos: 24\r\nUsuario: MoDeR | puntos: 18\r\nUsuario: Mario | puntos: 3\r\nUsuario: Pedro | puntos: 24\r\n\r\n*/\r\n```\r\n\r\n\r\n<a name=\"some\" />\r\n### some\r\n\r\n```js\r\nsome(clave, callback(), clave_split)\r\n```\r\nEste metodo comprueba si al menos una propiedad del objeto(la base de datos) cumple con la condicion que se especificó en el callback.\r\nEs similar al **Array.some**\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. callback(valor_actual, clave_actual): Aqui deberas de poner la funcion que se ejecutara o evaluara sobre cada elemento iterado del objeto que especificaste en el argumento clave, el callback puede recibir 2 argumentos:\r\n\r\n```\r\nvalor_actual (opcional): Aqui se mostrara el valor del elemento que se esta procesando en ese momento.\r\nclave_actual (opcional): Aqui se mostrara la clave del elemento que se esta procesando en ese momento.\r\n```\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nEsto retornara true si al menos una propiedad del objeto cumple con la condicion del callback se cumple, de lo contrario retornara false.\r\n\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//ejemplo_1\r\nconst db = require(\"megadb\");\r\nlet puntaje = new db.crearDB(\"puntajes\")\r\n\r\npuntaje.establecer('Mario', 2)\r\npuntaje.establecer('Pedro', 4)\r\npuntaje.establecer('Juan', 5)\r\npuntaje.establecer('Jair', 6)\r\n\r\n/* Estructura actual de la base de datos puntajes.json:\r\n\r\n{\r\n  \"Mario\": 2,\r\n  \"Pedro\": 4,\r\n  \"Juan\": 5,\r\n  \"Jair\": 6\r\n}\r\n\r\n*/\r\n\r\nlet verificar = puntaje.some(false, (v) => v == 6)\r\nif(verificar) {\r\n  console.log(\"Un usuario tiene 6 puntos.\")\r\n}\r\nelse{\r\n  console.log(\"Ningun usuario tiene 6 puntos.\")\r\n}\r\n\r\n/*Esto da como resultado:\r\n\"Un usuario tiene 6 puntos\"\r\n\r\n*/\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\nconst db = require(\"megadb\");\r\nlet users_lb = new db.crearDB(\"userspt\")\r\n\r\nlet usuarios = {\r\n  \"user001\": {\r\n    \"nombre\": \"MegaStar\",   \r\n    \"puntos\": 10\r\n  },\r\n  \"user002\": {  \r\n    \"nombre\": \"Juan\",   \r\n    \"puntos\": 4\r\n  },\r\n  \"user003\": {\r\n    \"nombre\": \"reDoM\",   \r\n    \"puntos\": 2\r\n  }\r\n}\r\n\r\nusers_lb.establecer('leaderboard', usuarios)\r\n\r\n/* Estructura actual de la base de datos userspt.json:\r\n\r\n{\r\n  \"leaderboard\": {\r\n    \"user001\": {\r\n      \"nombre\": \"MegaStar\",   \r\n      \"puntos\": 10\r\n    },\r\n    \"user002\": {  \r\n      \"nombre\": \"Juan\",   \r\n      \"puntos\": 4\r\n    },\r\n    \"user003\": {\r\n      \"nombre\": \"reDoM\",   \r\n      \"puntos\": 3\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\nconsole.log(users_lb.some(\"leaderboard\", (v) => v.nombre == \"MegaStar\")) // retorna true\r\nconsole.log(users_lb.some(\"leaderboard\", (v) => v.nombre == \"MoDeR\")) // retorna false\r\nconsole.log(users_lb.some(\"leaderboard\", (v) => v.puntos > 5)) // retorna true\r\n```\r\n\r\n\r\n<a name=\"setIndex\" />\r\n### setIndex\r\n\r\n```js\r\nsetIndex(clave, index, valor, clave_split)\r\n```\r\nEste metodo te permite remplazar un elemento especifico de un array a travez de su index (posicion).\r\n\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. index: Aqui deberas de poner el indice(index) del elemento que quieres remplazar en el array, esto es un numero.\r\n\r\n3. valor: Aqui deberas de colocar el nuevo valor que tomará el elemento del indice(index) que especificaste en el parametro **index**\r\n\r\n4. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con el array actualizado.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//ejemplo_1\r\nconst db = require(\"megadb\");\r\nlet mercado_db = new db.crearDB(\"mercado\")\r\n\r\nmercado_db.establecer('frutas', [\r\n  \"platano\",\r\n  \"durazno\",\r\n  \"manzana\",\r\n  \"zanahoria\"\r\n])\r\n\r\n/* Estructura actual de la base de datos mercado.json:\r\n{\r\n  \"frutas\": [\r\n    \"platano\",\r\n    \"durazno\",\r\n    \"manzana\",\r\n    \"zanahoria\"\r\n  ]\r\n}\r\n\r\n*/\r\n\r\nmercado_db.setIndex(\"frutas\", 3, \"piña\") // retorna promesa: [\"platano\", \"durazno\", \"manzana\", \"piña\"]\r\n```\r\n\r\n\r\n<a name=\"delIndex\" />\r\n### delIndex\r\n\r\n```js\r\ndelIndex(clave, index, clave_split)\r\n```\r\nEste metodo te permite remover un elemento especifico de un array a travez de su index (posicion).\r\n\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. index: Aqui deberas de poner el indice(index) del elemento que quieres remover del array, esto es un numero.\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nPromesa con el array actualizado.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//ejemplo_1\r\nconst db = require(\"megadb\");\r\nlet mercado_db = new db.crearDB(\"mercado\")\r\n\r\nmercado_db.establecer('frutas', [\r\n  \"platano\",\r\n  \"durazno\",\r\n  \"manzana\",\r\n  \"zanahoria\"\r\n])\r\n\r\n/* Estructura actual de la base de datos mercado.json:\r\n{\r\n  \"frutas\": [\r\n    \"platano\",\r\n    \"durazno\",\r\n    \"manzana\",\r\n    \"zanahoria\"\r\n  ]\r\n}\r\n\r\n*/\r\n\r\nmercado_db.delIndex(\"frutas\", 3) // retorna promesa: [\"platano\", \"durazno\", \"manzana\"]\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\n\r\nconst db = require(\"megadb\");\r\nlet economy_db = new db.crearDB(\"economydb\")\r\n\r\neconomy_db.establecer(\"usuarios\", [\r\n  {nombre: \"megastar\"},\r\n  {nombre: \"moder\"},\r\n  {nombre: \"pedro\"}\r\n])\r\n\r\n/* Estructura actual de la base de datos economydb.json:\r\n\r\n{\r\n  \"usuarios\": [\r\n    {\"nombre\": \"megastar\"},\r\n    {\"nombre\": \"moder\"},\r\n    {\"nombre\": \"pedro\"}\r\n  ]\r\n}\r\n\r\n*/\r\neconomy_db.obtener(\"usuarios\").then(usuarios => {\r\n  let index = usuarios.findIndex(u => u.nombre == \"pedro\")\r\n  if(index != -1) {\r\n    economy_db.delIndex(\"usuarios\", index).then(nuevo_array => {\r\n      console.log(nuevo_array)\r\n    }).catch(error => console.log(error))\r\n  }\r\n  else{\r\n    console.log(\"No hay ningun usuario con el nombre pedro.\")\r\n  }\r\n}).catch(error => console.log(error))\r\n\r\n/*\r\nResultado:\r\n\r\n[\r\n  {\"nombre\": \"megastar\"},\r\n  {\"nombre\": \"moder\"}\r\n]\r\n```\r\n\r\n\r\n<a name=\"findKey\" />\r\n### findKey\r\n\r\n```js\r\nfindKey(clave, callback(), clave_split)\r\n```\r\n\r\nEste metodo retorna la clave de la primera propiedad que cumpla la condicion del callback, si no encuentra nada regresara **undefined**.\r\nEs similar al **Array.findIndex**, solo que en vez de retornar el indice, regresa la clave.\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. callback(valor_actual, clave_actual) : Aqui deberas de poner la funcion que se ejecutara o evaluara sobre cada elemento iterado del objeto que especificaste en el argumento clave, el callback puede recibir 2 argumentos:\r\n\r\n```\r\nvalor_actual (opcional): Aqui se mostrara el valor del elemento que se esta procesando en ese momento.\r\nclave_actual (opcional): Aqui se mostrara la clave del elemento que se esta procesando en ese momento.\r\n```\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades anidadas en el argumento clave (por default es el .)\r\n\r\n__Retorna__\r\n\r\nEsto retornara una promesa con la clave de la primera propiedad que cumpla la condicion del callback, de lo contrario retornara **undefined**.\r\n\r\n__Error__\r\n\r\nEn caso de que ocurra un error, esto regresara un objeto con el error descriptivo *(puedes obtenerlo con un .catch(error => ))*\r\n[Click aqui para ver los tipos de errores](#Errores)\r\n\r\n__Ejemplos__\r\n\r\n```js\r\n\r\n//ejemplo_1\r\nconst db = require(\"megadb\");\r\nlet escuela = new db.crearDB(\"escuela\")\r\n\r\nescuela.establecer('Mario', {edad: 15, apellido: \"garcia\"})\r\nescuela.establecer('Pedro', {edad: 12, apellido: \"rojas\"})\r\nescuela.establecer('Juan', {edad: 10, apellido: \"perez\"})\r\nescuela.establecer('Jair', {edad: 16, apellido: \"gonzales\"})\r\n\r\n/* Estructura actual de la base de datos escuela.json:\r\n\r\n{\r\n  \"Mario\": {\r\n    \"edad: 15,\r\n    \"apellido: \"garcia\"\r\n  },\r\n  \"Pedro\": {\r\n    \"edad: 12,\r\n    \"apellido: \"rojas\"\r\n  },\r\n  \"Juan\": {\r\n    \"edad: 10,\r\n    \"apellido: \"perez\"\r\n  },\r\n  \"Jair\": {\r\n    \"edad: 16,\r\n    \"apellido: \"gonzales\"\r\n  }\r\n}\r\n\r\n*/\r\n\r\nescuela.findKey(false, (v) => v.edad == 16).then(alumno => { //v es el elemento que se esta procesando en ese momento\r\n\r\n  //Ahora alumno debera de contener 'Jair'\r\n    \r\n  if(alumno == undefined) return console.log(\"Ningun alumno tiene 16 años\")\r\n  return console.log(`El alumno ${alumno} tiene 16 años!`)\r\n}).catch(error => console.log(error))\r\n\r\n//Esto da como resultado: \"El alumno Jair tiene 16 años!\"\r\n\r\n\r\n/////////////////////////////////////////////////////\r\n\r\n\r\n//ejemplo_2\r\nconst db = require(\"megadb\");\r\nlet registros = new db.crearDB(\"registros\")\r\n\r\nlet registrados = {\r\n  \"ID_1\": {\r\n    \"username\": \"MegaStar\",\r\n    \"password\": \"xxxxxxxx\",\r\n    \"age\": 20\r\n  },\r\n  \"ID_2\": {\r\n    \"username\": \"MoDeR\",\r\n    \"password\": \"aaaaaaaa\",\r\n    \"age\": 19\r\n  },\r\n  \"ID_3\": {\r\n    \"username\": \"RatSageM\",\r\n    \"password\": \"cccccccc\",\r\n    \"age\": 18\r\n  }\r\n}\r\n\r\nregistros.establecer('usuarios', registrados)\r\n\r\n/* Estructura actual de la base de datos registros.json:\r\n\r\n{\r\n  \"usuarios\": {\r\n    \"ID_1\": {\r\n      \"username\": \"MegaStar\",\r\n      \"password\": \"xxxxxxxx\",\r\n      \"edad\": 20\r\n    },\r\n    \"ID_2\": {\r\n      \"username\": \"MoDeR\",\r\n      \"password\": \"aaaaaaaa\",\r\n      \"edad\": 19\r\n    },\r\n    \"ID_3\": {\r\n      \"username\": \"RatSageM\",\r\n      \"password\": \"cccccccc\",\r\n      \"edad\": 18\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n\r\nregistros.findKey(\"usuarios\", (v) => v.username == \"MegaStar\").then(id => { //v es el elemento del objeto \"usuarios\" que se esta procesando en ese momento\r\n\r\n  // Ahora id debera de contener 'ID_1'\r\n   \r\n\r\n  if(id == undefined) return console.log(\"No existe este usuario.\")\r\n  return console.log(`El ID del usuario MegaStar es: ${id}`)\r\n}).catch(error => console.log(error))\r\n\r\n//Esto da como resultado: \"El ID del usuario MegaStar es: ID_1\"\r\n```\r\n\r\n\r\n<a name=\"partition\" />\r\n### partition\r\n\r\n```js\r\npartition(clave, callback(), clave_split)\r\n```\r\n\r\nEste metodo divide un objeto(base de datos) en dos objetos donde el primer objeto contiene las propiedades que cumplan con la condicion del callback y el segundo objeto con las propiedades que no la condicion.\r\n\r\n__Argumentos__\r\n\r\n1. clave: La clave puede recibir dos tipos de valores, en el caso de que quieras buscar en las propiedades de un objeto especifico, puedes colocar el nombre del objeto. Si quieres buscar en las propiedades de un objeto anidado, puedes usar el . seguido del nombre del objeto anidado (el . es un signo por default, puedes cambiarlo en clave_split)\r\nPuedes usar false en caso de que directamente quieras buscar en las propiedades de una base de datos.\r\n\r\n2. callback(valor_actual, clave_actual) : Aqui deberas de poner la funcion que se ejecutara o evaluara sobre cada elemento iterado del objeto que especificaste en el argumento clave, el callback puede recibir 2 argumentos:\r\n\r\n```\r\nvalor_actual (opcional): Aqui se mostrara el valor del elemento que se esta procesando en ese momento.\r\nclave_actual (opcional): Aqui se mostrara la clave del elemento que se esta procesando en ese momento.\r\n```\r\n\r\n3. clave_split (opcional): Este argumento es opcional, aqui puedes especificar el signo que se usara para acceder a propiedades a","readmeFilename":"README.md","_etag":"W/\"f6027dcaa19544abf68bd6dbbc6a8033\"","_lastModified":"Mon, 09 May 2022 02:50:33 GMT","_cached":true}