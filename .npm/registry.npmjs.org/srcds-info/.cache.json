{"_id":"srcds-info","_rev":"20-0b61393f0a9d1d3b8e66b49c67a36ea1","name":"srcds-info","description":"A tool to query Source based game servers","dist-tags":{"latest":"0.1.1"},"versions":{"0.0.0":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.0.0","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":"~0.6.11"},"dependencies":{},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"_npmUser":{"name":"davidbanham","email":"david@banham.id.au"},"_id":"srcds-info@0.0.0","_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"722a50cb7f9226522d890283d7ac4de99e86a562","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.0.0.tgz","integrity":"sha512-X7+z6KzuJhEsZKmeZelty1HwyKtiodBSKhSuX0PU7DIsPTHtOb1NGnqaqCXScZRFqPUIWpzkXLabap+7ZVI3oA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAj0jQRH26OvXPwXgA01VmQnyzCuYjClc5abPpUDt7VPAiABnny6tC2ssHaydYhzQ7A9l6uxWbVWsNuNWNFJg21hKg=="}]},"readme":"","maintainers":[{"name":"davidbanham","email":"david@banham.id.au"}]},"0.0.1":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.0.1","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":"~0.6.11"},"dependencies":{},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"_npmUser":{"name":"davidbanham","email":"david@banham.id.au"},"_id":"srcds-info@0.0.1","_engineSupported":true,"_npmVersion":"1.1.1","_nodeVersion":"v0.6.11","_defaultsLoaded":true,"dist":{"shasum":"78a2dbb47bc5f4fd63d3f835bf35b08fedb1e47b","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.0.1.tgz","integrity":"sha512-mzur53KsamsooAFopLzoiNy4MJa5D+nQ4hlfqnw6wp22N+PJFfhCZ7POhu2wgw0V1c8qE26UHW65Ph5nMfHg5A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFQbjLoaKou71O6P1bKN/HYBj1KOC7wK0wbU24Eit7muAiEAjJD164llpGAxMzAV6QHyr93hNdLB+IzxSdMzjnrwdkw="}]},"readme":"# liverail-api \n\n## Purpose\n\nThis is a node interface to the protocol for querying Source based servers. More information on the protocol can be found here:\n\nhttps://developer.valvesoftware.com/wiki/Server_Queries\n\nIt currently only supports the A2S\\_INFO method, which is really the guts of it. If you have a need for A2S\\_PLAYER feel free to add it in and shoot us a pull request. If that's beyond you, feel free to let us know and we may add it.\n\nCreated by [Pinion.](http://pinion.gg/)\n\n## Installation\n\nnpm install srcds-info\n\n## Demo\n\n```javascript\nvar srcds = require('./main.js');\n\nsrcds.init();\n\nsrcds.client.on('decoded', function(info) {\n\tconsole.log(info);\n\tsrcds.client.close();\n});\n\nsrcds.info('203.217.24.85', 27017, function(err) {\n\tif (err) console.error(err)\n});\n```\n\n## API\n\n### srcds.init([port]); \nThis takes no callback because dgram doesn't give you anything useful to bind it to. Port is optional. If not defined it will bind to a random port number.\n\n### srcds.info(ip, port, [callback];\nQueries the given credentials for information and emits the 'decoded' event once there is some useful information. Callback is optional, will only give you an error if something has gone wrong with the low level networking or similar.\n\n### srcds.client.on('decoded', function(info) {do interesting things};\nPasses back an object with the following properties: \n{ ip: string,\n  port: number,\n  serverName: string,\n  map: string,\n  gameType: string,\n  gameName: string,\n  appID: number,\n  numPlayers: number,\n  maxPlayers: number,\n  numBots: number,\n  dedicated: string(dedicated, listen, SourceTV),\n  os: string(Linux, Windows),\n  pw: boolean,\n  secure: boolean }\n\nYou may also listen for all of the events emitted by a standard [dgram](http://nodejs.org/docs/latest/api/dgram.html)\n","maintainers":[{"name":"davidbanham","email":"david@banham.id.au"}]},"0.0.2":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.0.2","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":"~0.6.11"},"dependencies":{},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"_npmUser":{"name":"davidbanham","email":"david@banham.id.au"},"_id":"srcds-info@0.0.2","_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"c1f8663fe8eb5167bd1869b00534e959642c65a0","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.0.2.tgz","integrity":"sha512-qbYgtG0IHw4MFcOhNXeAMrxcz1SJa6QwLB3TeDzPlY07KbUTc4vREi0KT0j/r1T6XWnqQkHKjVGtBQ6K9N1H0w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCAk+CTH1a2HZSWlzBkXKjvphULOFldkslvUEYHsSewhAIgepmFgljoKEH1ZQXbILf6vTHxKK5MU6hKjV1PNylbuCY="}]},"readme":"# liverail-api \n\n## Purpose\n\nThis is a node interface to the protocol for querying Source based servers. More information on the protocol can be found here:\n\nhttps://developer.valvesoftware.com/wiki/Server_Queries\n\nIt currently only supports the A2S\\_INFO method, which is really the guts of it. If you have a need for A2S\\_PLAYER feel free to add it in and shoot us a pull request. If that's beyond you, feel free to let us know and we may add it.\n\nCreated by [Pinion.](http://pinion.gg/)\n\n## Installation\n\nnpm install srcds-info\n\n## Demo\n\n```javascript\nvar srcds = require('srcds-info');\n\nsrcds.init();\n\nsrcds.client.on('decoded', function(info) {\n\tconsole.log(info);\n\tsrcds.client.close();\n});\n\nsrcds.info('203.217.24.85', 27017, function(err) {\n\tif (err) console.error(err)\n});\n```\n\n## API\n\n### srcds.init([port]); \nThis takes no callback because dgram doesn't give you anything useful to bind it to. Port is optional. If not defined it will bind to a random port number.\n\n### srcds.info(ip, port, [callback];\nQueries the given credentials for information and emits the 'decoded' event once there is some useful information. Callback is optional, will only give you an error if something has gone wrong with the low level networking or similar.\n\n### srcds.client.on('decoded', function(info) {do interesting things};\nPasses back an object with the following properties: \n{ ip: string,\n  port: number,\n  serverName: string,\n  map: string,\n  gameType: string,\n  gameName: string,\n  appID: number,\n  numPlayers: number,\n  maxPlayers: number,\n  numBots: number,\n  dedicated: string(dedicated, listen, SourceTV),\n  os: string(Linux, Windows),\n  pw: boolean,\n  secure: boolean }\n\nSometimes servers will send back a blank info response. This seems to be a protection against an old DOS attack. If a stripped packet is received, an 'error' event will be emitted with an object containing ip and port properties.\n\nYou may also listen for all of the events emitted by a standard [dgram](http://nodejs.org/docs/latest/api/dgram.html)\n","maintainers":[{"name":"davidbanham","email":"david@banham.id.au"}]},"0.0.3":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.0.3","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":"~0.6.11"},"dependencies":{},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"_npmUser":{"name":"davidbanham","email":"david@banham.id.au"},"_id":"srcds-info@0.0.3","_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"8ca044f01ecd38f308f99d66a20c435b6f4bfe6f","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.0.3.tgz","integrity":"sha512-zA6stiE3S9+uMCLXVt3774uRPvHjPOj+NtlYw6srZ8Y8UfEIa8RuTl3H9HurVB56II044q1faW6hR3BtRWbViA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCoYd59bBqwK5uZ4kFb8Ie4p//eWtjHqBdQlVFGPbZ2uAIgLtg1R98pf0m4rmVDdWf5DTzyyzfXIX/OOfg0fumaCbI="}]},"readme":"# liverail-api \n\n## Purpose\n\nThis is a node interface to the protocol for querying Source based servers. More information on the protocol can be found here:\n\nhttps://developer.valvesoftware.com/wiki/Server_Queries\n\nIt currently only supports the A2S\\_INFO method, which is really the guts of it. If you have a need for A2S\\_PLAYER feel free to add it in and shoot us a pull request. If that's beyond you, feel free to let us know and we may add it.\n\nCreated by [Pinion.](http://pinion.gg/)\n\n## Installation\n\nnpm install srcds-info\n\n## Demo\n\n```javascript\nvar srcds = require('srcds-info');\n\nsrcds.init();\n\nsrcds.client.on('decoded', function(info) {\n\tconsole.log(info);\n\tsrcds.client.close();\n});\n\nsrcds.info('203.217.24.85', 27017, function(err) {\n\tif (err) console.error(err)\n});\n```\n\n## API\n\n### srcds.init([port]); \nThis takes no callback because dgram doesn't give you anything useful to bind it to. Port is optional. If not defined it will bind to a random port number.\n\n### srcds.info(ip, port, [callback];\nQueries the given credentials for information and emits the 'decoded' event once there is some useful information. Callback is optional, will only give you an error if something has gone wrong with the low level networking or similar.\n\n### srcds.client.on('decoded', function(info) {do interesting things};\nPasses back an object with the following properties: \n{ ip: string,\n  port: number,\n  serverName: string,\n  map: string,\n  gameType: string,\n  gameName: string,\n  appID: number,\n  numPlayers: number,\n  maxPlayers: number,\n  numBots: number,\n  dedicated: string(dedicated, listen, SourceTV),\n  os: string(Linux, Windows),\n  pw: boolean,\n  secure: boolean }\n\nSometimes servers will send back a blank info response. This seems to be a protection against an old DOS attack. If a stripped packet is received, an 'error' event will be emitted with an object containing ip and port properties.\n\nYou may also listen for all of the events emitted by a standard [dgram](http://nodejs.org/docs/latest/api/dgram.html)\n","maintainers":[{"name":"davidbanham","email":"david@banham.id.au"}]},"0.0.4":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.0.4","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":"~0.6.11"},"dependencies":{},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"_npmUser":{"name":"davidbanham","email":"david@banham.id.au"},"_id":"srcds-info@0.0.4","_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"104ce457d98b272a69595e68b6ebd9d45d6d34d4","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.0.4.tgz","integrity":"sha512-PfmAnDeYrrPxg1ZQQ5ztw/F3UISXz5cxuMXg2TLN5JJXgNCdAhPItgsiRMEVfcxmcJkFGfsszkF71Bpr+raDGg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICTwV3XUMqHqxIzHXbmhEH/85yMkSIYJP5FkaQeBsxS/AiBdjJB18xNMmY4Qni2TNu2bAETKDZZIHNgZANz7pKl+vA=="}]},"readme":"# liverail-api \n\n## Purpose\n\nThis is a node interface to the protocol for querying Source based servers. More information on the protocol can be found here:\n\nhttps://developer.valvesoftware.com/wiki/Server_Queries\n\nIt currently only supports the A2S\\_INFO method, which is really the guts of it. If you have a need for A2S\\_PLAYER feel free to add it in and shoot us a pull request. If that's beyond you, feel free to let us know and we may add it.\n\nCreated by [Pinion.](http://pinion.gg/)\n\n## Installation\n\nnpm install srcds-info\n\n## Demo\n\n```javascript\nvar srcds = require('srcds-info');\n\nsrcds.init();\n\nsrcds.client.on('decoded', function(info) {\n\tconsole.log(info);\n\tsrcds.client.close();\n});\n\nsrcds.info('203.217.24.85', 27017, function(err) {\n\tif (err) console.error(err)\n});\n```\n\n## API\n\n### srcds.init([port]); \nThis takes no callback because dgram doesn't give you anything useful to bind it to. Port is optional. If not defined it will bind to a random port number.\n\n### srcds.info(ip, port, [callback];\nQueries the given credentials for information and emits the 'decoded' event once there is some useful information. Callback is optional, will only give you an error if something has gone wrong with the low level networking or similar.\n\n### srcds.client.on('decoded', function(info) {do interesting things};\nPasses back an object with the following properties: \n{ ip: string,\n  port: number,\n  serverName: string,\n  map: string,\n  gameType: string,\n  gameName: string,\n  appID: number,\n  numPlayers: number,\n  maxPlayers: number,\n  numBots: number,\n  dedicated: string(dedicated, listen, SourceTV),\n  os: string(Linux, Windows),\n  pw: boolean,\n  secure: boolean }\n\nSometimes servers will send back a blank info response. This seems to be a protection against an old DOS attack. If a stripped packet is received, an 'error' event will be emitted with an object containing ip and port properties.\n\nYou may also listen for all of the events emitted by a standard [dgram](http://nodejs.org/docs/latest/api/dgram.html)\n","maintainers":[{"name":"davidbanham","email":"david@banham.id.au"}]},"0.0.5":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.0.5","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":"~0.6.11"},"dependencies":{},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"_npmUser":{"name":"davidbanham","email":"david@banham.id.au"},"_id":"srcds-info@0.0.5","_engineSupported":true,"_npmVersion":"1.1.4","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"dist":{"shasum":"90b59cf7f6940f39ae2bf98c45315d4160818ffc","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.0.5.tgz","integrity":"sha512-RQnjZmpQlXVWoa1+q9T72rmPF17okbQFXVErnthQHn1UhvxYh3URW9m8zO89Twcq/DhmjZAeesm+hfLZ0lcEuQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB+VSYSN/H7bQBVAEOXyOn+MRNXcvW8K6wnNSvvJUJBHAiAGY3JMvpKq33+J3oBSKmHLNfvx1kj1MbRv1/dkqX6LbA=="}]},"readme":"# liverail-api \n\n## Purpose\n\nThis is a node interface to the protocol for querying Source based servers. More information on the protocol can be found here:\n\nhttps://developer.valvesoftware.com/wiki/Server_Queries\n\nIt currently only supports the A2S\\_INFO method, which is really the guts of it. If you have a need for A2S\\_PLAYER feel free to add it in and shoot us a pull request. If that's beyond you, feel free to let us know and we may add it.\n\nCreated by [Pinion.](http://pinion.gg/)\n\n## Installation\n\nnpm install srcds-info\n\n## Demo\n\n```javascript\nvar srcds = require('srcds-info');\n\nsrcds.init();\n\nsrcds.client.on('decoded', function(info) {\n\tconsole.log(info);\n\tsrcds.client.close();\n});\n\nsrcds.info('203.217.24.85', 27017, function(err) {\n\tif (err) console.error(err)\n});\n```\n\n## API\n\n### srcds.init([port]); \nThis takes no callback because dgram doesn't give you anything useful to bind it to. Port is optional. If not defined it will bind to a random port number.\n\n### srcds.info(ip, port, [callback];\nQueries the given credentials for information and emits the 'decoded' event once there is some useful information. Callback is optional, will only give you an error if something has gone wrong with the low level networking or similar.\n\n### srcds.client.on('decoded', function(info) {do interesting things};\nPasses back an object with the following properties: \n{ ip: string,\n  port: number,\n  serverName: string,\n  map: string,\n  gameType: string,\n  gameName: string,\n  appID: number,\n  numPlayers: number,\n  maxPlayers: number,\n  numBots: number,\n  dedicated: string(dedicated, listen, SourceTV),\n  os: string(Linux, Windows),\n  pw: boolean,\n  secure: boolean }\n\nSometimes servers will send back a blank info response. This seems to be a protection against an old DOS attack. If a stripped packet is received, an 'error' event will be emitted with an object containing ip and port properties.\n\nYou may also listen for all of the events emitted by a standard [dgram](http://nodejs.org/docs/latest/api/dgram.html)\n","maintainers":[{"name":"davidbanham","email":"david@banham.id.au"}]},"0.1.0":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.1.0","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":">=0.6.11"},"dependencies":{},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"readme":"# liverail-api \n\n## Purpose\n\nThis is a node interface to the protocol for querying Source based servers. More information on the protocol can be found here:\n\nhttps://developer.valvesoftware.com/wiki/Server_Queries\n\nIt currently only supports the A2S\\_INFO method, which is really the guts of it. If you have a need for A2S\\_PLAYER feel free to add it in and shoot us a pull request. If that's beyond you, feel free to let us know and we may add it.\n\nCreated by [Pinion.](http://pinion.gg/)\n\n## Installation\n\nnpm install srcds-info\n\n## Demo\n\n```javascript\nvar srcds = require('srcds-info');\n\nclient = srcds('27.50.71.3', 21045);\n\nclient.info('203.217.24.85', 27017, function(err, info) {\n\tif (err) {\n        \tconsole.error(err)\n\t}\n\telse {\n\t\tconsole.log(info);\n\t}\n\tclient.close();\n});\n```\n\n## API\n\n### srcds(server, port[, options]); \nReturns a client object for querying. Options is optional. Currently the only option is \"timeout\" which lets you change how long to wait for a response before emitting an error. The default is 10 seconds.\n\n### client.info(callback);\nQueries the given server and calls the callback with either an information object or an error. The object has the following properties: \n{ ip: string,\n  port: number,\n  serverName: string,\n  map: string,\n  gameType: string,\n  gameName: string,\n  appID: number,\n  numPlayers: number,\n  maxPlayers: number,\n  numBots: number,\n  dedicated: string(dedicated, listen, SourceTV),\n  os: string(Linux, Windows),\n  pw: boolean,\n  secure: boolean }\n\nSometimes servers will send back a blank info response. This seems to be a protection against an old DOS attack. If a stripped packet is received, an 'error' will be returned with an object containing ip and port properties.\n\n### client.close()\n\nCleans up the connection associated with a client.\n","_id":"srcds-info@0.1.0","dist":{"shasum":"8f1d7650ff385372e59b33b5a1628d3defef2b8a","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.1.0.tgz","integrity":"sha512-uMmJBeYs1zrq9bZ/gMNbyH9OvclokeE0ArJspWq5x4V/U3MvRn4rnhWcdXQKCFpFI8VTtdbH+FKQEHKoeDYohQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAPme3dosv/wbp6fGN2jgTGPzavLeM8EooNo4j0BWvggAiEA1P/4xGDQR5YxILXkpxFwKOdxDkT8oR0je12BP1bfaqM="}]},"_npmVersion":"1.1.49","_npmUser":{"name":"sgentle","email":"sam@samgentle.com"},"maintainers":[{"name":"davidbanham","email":"david@banham.id.au"},{"name":"sgentle","email":"sam@samgentle.com"}]},"0.1.1":{"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"name":"srcds-info","description":"A tool to query Source based game servers","version":"0.1.1","homepage":"https://github.com/PinionTech/srcds-info","repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"main":"./main.js","engines":{"node":">=0.6.11"},"dependencies":{"packet":"0.0.3"},"devDependencies":{},"optionalDependencies":{},"scripts":{"test":"node ./test.js"},"readme":"# liverail-api \n\n## Purpose\n\nThis is a node interface to the protocol for querying Source based servers. More information on the protocol can be found here:\n\nhttps://developer.valvesoftware.com/wiki/Server_Queries\n\nIt currently only supports the A2S\\_INFO method, which is really the guts of it. If you have a need for A2S\\_PLAYER feel free to add it in and shoot us a pull request. If that's beyond you, feel free to let us know and we may add it.\n\nCreated by [Pinion.](http://pinion.gg/)\n\n## Installation\n\nnpm install srcds-info\n\n## Demo\n\n```javascript\nvar srcds = require('srcds-info');\n\nclient = srcds('27.50.71.3', 21045);\n\nclient.info('203.217.24.85', 27017, function(err, info) {\n\tif (err) {\n        \tconsole.error(err)\n\t}\n\telse {\n\t\tconsole.log(info);\n\t}\n\tclient.close();\n});\n```\n\n## API\n\n### srcds(server, port[, options]); \nReturns a client object for querying. Options is optional. Currently the only option is \"timeout\" which lets you change how long to wait for a response before emitting an error. The default is 10 seconds.\n\n### client.info(callback);\nQueries the given server and calls the callback with either an information object or an error. The object has the following properties: \n{ ip: string,\n  port: number,\n  serverName: string,\n  map: string,\n  gameType: string,\n  gameName: string,\n  appID: number,\n  numPlayers: number,\n  maxPlayers: number,\n  numBots: number,\n  dedicated: string(dedicated, listen, SourceTV),\n  os: string(Linux, Windows),\n  pw: boolean,\n  secure: boolean }\n\nSometimes servers will send back a blank info response. This seems to be a protection against an old DOS attack. If a stripped packet is received, an 'error' will be returned with an object containing ip and port properties.\n\n### client.close()\n\nCleans up the connection associated with a client.\n","_id":"srcds-info@0.1.1","dist":{"shasum":"a12d355b8ff10979b5e564caeeddfb6631f87c51","tarball":"https://registry.npmjs.org/srcds-info/-/srcds-info-0.1.1.tgz","integrity":"sha512-jid6OjJXzJ/S90JgOjXEvYTCdyQS8pzEPoIT6C1FLr3gYPeCntcd34ZmoLY0mxLuoRdQhLadK3nNQ980eGQYZw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFDLkKb33i03U8Hx1l8qo5CrXt45C7IXvTYLX0AAjHyAAiAGyTxesb9WhLdvMBKDa6z/RWZTlKy1aYamLbHtDy4K9g=="}]},"_npmVersion":"1.1.61","_npmUser":{"name":"sgentle","email":"sam@samgentle.com"},"maintainers":[{"name":"davidbanham","email":"david@banham.id.au"},{"name":"sgentle","email":"sam@samgentle.com"}]}},"readme":"","maintainers":[{"name":"davidbanham","email":"david@banham.id.au"},{"name":"sgentle","email":"sam@samgentle.com"}],"time":{"modified":"2022-06-26T23:23:46.946Z","created":"2012-03-02T05:08:28.503Z","0.0.0":"2012-03-02T05:08:42.544Z","0.0.1":"2012-03-02T05:28:16.446Z","0.0.2":"2012-03-14T00:10:19.354Z","0.0.3":"2012-03-14T00:41:40.642Z","0.0.4":"2012-03-14T01:29:57.097Z","0.0.5":"2012-04-05T01:59:53.518Z","0.1.0":"2012-08-29T06:59:36.436Z","0.1.1":"2012-10-06T01:43:26.895Z"},"author":{"name":"David Banham","email":"david@pinion.gg","url":"http://pinion.gg"},"repository":{"type":"git","url":"git://github.com/PinionTech/srcds-info.git"},"_etag":"W/\"ed621a0b49c1dc1011cf61b4be4cf57f\"","_lastModified":"Sun, 26 Jun 2022 23:23:48 GMT","_cached":true}